//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Pgn.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Redchess.Pgn {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public sealed partial class PgnParser : Parser {
	public const int
		LEFT_TAG=1, RIGHT_TAG=2, LEFT_CURLY_BRACKET=3, RIGHT_CURLY_BRACKET=4, 
		LEFT_BRACKET=5, RIGHT_BRACKET=6, QUOTE=7, EVENT=8, SITE=9, DATE=10, ROUND=11, 
		WHITE=12, BLACK=13, RESULT=14, MATE=15, CHECK=16, CASTLE_KINGSIDE=17, 
		CASTLE_QUEENSIDE=18, PROMOTES_TO=19, TAKES=20, WS=21, LINE_COMMENT=22, 
		GAME_RESULT=23, GAME_RESULT_END_OF_MOVETEXT=24, QUOTED_STRING=25, PIECE_TO_SQUARE=26, 
		CAPTURE=27, PROMOTES_TO_PIECE=28, INTEGER=29, MOVE_LABEL=30, BLOCK_COMMENT=31, 
		NO_MOVE=32, TAG_NAME=33, NUMERIC_ANNOTATION_GLYPH=34, MOVE_ANALYSIS=35;
	public const int
		RULE_parse = 0, RULE_parseTag = 1, RULE_document = 2, RULE_gameList = 3, 
		RULE_generalTagList = 4, RULE_game = 5, RULE_annotation = 6, RULE_annotationList = 7, 
		RULE_individualMove = 8, RULE_moveList = 9, RULE_move = 10, RULE_compulsoryTag = 11, 
		RULE_blockComment = 12, RULE_enterVariant = 13, RULE_leaveVariant = 14, 
		RULE_variantLine = 15, RULE_eventTag = 16, RULE_siteTag = 17, RULE_dateTag = 18, 
		RULE_roundTag = 19, RULE_blackTag = 20, RULE_whiteTag = 21, RULE_resultTag = 22, 
		RULE_optionalTag = 23;
	public static readonly string[] ruleNames = {
		"parse", "parseTag", "document", "gameList", "generalTagList", "game", 
		"annotation", "annotationList", "individualMove", "moveList", "move", 
		"compulsoryTag", "blockComment", "enterVariant", "leaveVariant", "variantLine", 
		"eventTag", "siteTag", "dateTag", "roundTag", "blackTag", "whiteTag", 
		"resultTag", "optionalTag"
	};

	private static readonly string[] _LiteralNames = {
		null, "'['", "']'", "'{'", "'}'", "'('", "')'", "'\"'", "'Event'", "'Site'", 
		"'Date'", "'Round'", "'White'", "'Black'", "'Result'", "'#'", "'+'", "'O-O'", 
		"'O-O-O'", "'='", "'x'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LEFT_TAG", "RIGHT_TAG", "LEFT_CURLY_BRACKET", "RIGHT_CURLY_BRACKET", 
		"LEFT_BRACKET", "RIGHT_BRACKET", "QUOTE", "EVENT", "SITE", "DATE", "ROUND", 
		"WHITE", "BLACK", "RESULT", "MATE", "CHECK", "CASTLE_KINGSIDE", "CASTLE_QUEENSIDE", 
		"PROMOTES_TO", "TAKES", "WS", "LINE_COMMENT", "GAME_RESULT", "GAME_RESULT_END_OF_MOVETEXT", 
		"QUOTED_STRING", "PIECE_TO_SQUARE", "CAPTURE", "PROMOTES_TO_PIECE", "INTEGER", 
		"MOVE_LABEL", "BLOCK_COMMENT", "NO_MOVE", "TAG_NAME", "NUMERIC_ANNOTATION_GLYPH", 
		"MOVE_ANALYSIS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Pgn.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public PgnParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class ParseContext : ParserRuleContext {
		public DocumentContext document() {
			return GetRuleContext<DocumentContext>(0);
		}
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterParse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitParse(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(Context, State);
		EnterRule(_localctx, 0, RULE_parse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48; document();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParseTagContext : ParserRuleContext {
		public CompulsoryTagContext compulsoryTag() {
			return GetRuleContext<CompulsoryTagContext>(0);
		}
		public OptionalTagContext optionalTag() {
			return GetRuleContext<OptionalTagContext>(0);
		}
		public ParseTagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parseTag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterParseTag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitParseTag(this);
		}
	}

	[RuleVersion(0)]
	public ParseTagContext parseTag() {
		ParseTagContext _localctx = new ParseTagContext(Context, State);
		EnterRule(_localctx, 2, RULE_parseTag);
		try {
			State = 52;
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 50; compulsoryTag();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 51; optionalTag();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DocumentContext : ParserRuleContext {
		public GameListContext gameList() {
			return GetRuleContext<GameListContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(PgnParser.Eof, 0); }
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterDocument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitDocument(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(Context, State);
		EnterRule(_localctx, 4, RULE_document);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54; gameList();
			State = 55; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GameListContext : ParserRuleContext {
		public GameContext[] game() {
			return GetRuleContexts<GameContext>();
		}
		public GameContext game(int i) {
			return GetRuleContext<GameContext>(i);
		}
		public GameListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gameList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterGameList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitGameList(this);
		}
	}

	[RuleVersion(0)]
	public GameListContext gameList() {
		GameListContext _localctx = new GameListContext(Context, State);
		EnterRule(_localctx, 6, RULE_gameList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 57; game();
				}
				}
				State = 60;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==LEFT_TAG );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeneralTagListContext : ParserRuleContext {
		public OptionalTagContext[] optionalTag() {
			return GetRuleContexts<OptionalTagContext>();
		}
		public OptionalTagContext optionalTag(int i) {
			return GetRuleContext<OptionalTagContext>(i);
		}
		public CompulsoryTagContext[] compulsoryTag() {
			return GetRuleContexts<CompulsoryTagContext>();
		}
		public CompulsoryTagContext compulsoryTag(int i) {
			return GetRuleContext<CompulsoryTagContext>(i);
		}
		public GeneralTagListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generalTagList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterGeneralTagList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitGeneralTagList(this);
		}
	}

	[RuleVersion(0)]
	public GeneralTagListContext generalTagList() {
		GeneralTagListContext _localctx = new GeneralTagListContext(Context, State);
		EnterRule(_localctx, 8, RULE_generalTagList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 62; optionalTag();
				}
				break;
			case 2:
				{
				State = 63; compulsoryTag();
				}
				break;
			}
			State = 70;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 68;
					switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
					case 1:
						{
						State = 66; optionalTag();
						}
						break;
					case 2:
						{
						State = 67; compulsoryTag();
						}
						break;
					}
					} 
				}
				State = 72;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GameContext : ParserRuleContext {
		public GeneralTagListContext generalTagList() {
			return GetRuleContext<GeneralTagListContext>(0);
		}
		public MoveListContext moveList() {
			return GetRuleContext<MoveListContext>(0);
		}
		public ITerminalNode GAME_RESULT_END_OF_MOVETEXT() { return GetToken(PgnParser.GAME_RESULT_END_OF_MOVETEXT, 0); }
		public GameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_game; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterGame(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitGame(this);
		}
	}

	[RuleVersion(0)]
	public GameContext game() {
		GameContext _localctx = new GameContext(Context, State);
		EnterRule(_localctx, 10, RULE_game);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73; generalTagList();
			State = 75;
			_la = TokenStream.La(1);
			if (_la==MOVE_LABEL) {
				{
				State = 74; moveList();
				}
			}

			State = 78;
			_la = TokenStream.La(1);
			if (_la==GAME_RESULT_END_OF_MOVETEXT) {
				{
				State = 77; Match(GAME_RESULT_END_OF_MOVETEXT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		public BlockCommentContext blockComment() {
			return GetRuleContext<BlockCommentContext>(0);
		}
		public VariantLineContext variantLine() {
			return GetRuleContext<VariantLineContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 12, RULE_annotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			switch (TokenStream.La(1)) {
			case BLOCK_COMMENT:
				{
				State = 80; blockComment();
				}
				break;
			case LEFT_BRACKET:
				{
				State = 81; variantLine();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationListContext : ParserRuleContext {
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public AnnotationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterAnnotationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitAnnotationList(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationListContext annotationList() {
		AnnotationListContext _localctx = new AnnotationListContext(Context, State);
		EnterRule(_localctx, 14, RULE_annotationList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 84; annotation();
			State = 88;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 85; annotation();
					}
					} 
				}
				State = 90;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndividualMoveContext : ParserRuleContext {
		public IToken foo;
		public IToken promote;
		public IToken checkormate;
		public IToken annotation_glyph;
		public ITerminalNode PIECE_TO_SQUARE() { return GetToken(PgnParser.PIECE_TO_SQUARE, 0); }
		public ITerminalNode CAPTURE() { return GetToken(PgnParser.CAPTURE, 0); }
		public ITerminalNode CASTLE_KINGSIDE() { return GetToken(PgnParser.CASTLE_KINGSIDE, 0); }
		public ITerminalNode CASTLE_QUEENSIDE() { return GetToken(PgnParser.CASTLE_QUEENSIDE, 0); }
		public ITerminalNode MOVE_ANALYSIS() { return GetToken(PgnParser.MOVE_ANALYSIS, 0); }
		public AnnotationListContext annotationList() {
			return GetRuleContext<AnnotationListContext>(0);
		}
		public ITerminalNode PROMOTES_TO_PIECE() { return GetToken(PgnParser.PROMOTES_TO_PIECE, 0); }
		public ITerminalNode CHECK() { return GetToken(PgnParser.CHECK, 0); }
		public ITerminalNode MATE() { return GetToken(PgnParser.MATE, 0); }
		public ITerminalNode NUMERIC_ANNOTATION_GLYPH() { return GetToken(PgnParser.NUMERIC_ANNOTATION_GLYPH, 0); }
		public IndividualMoveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_individualMove; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterIndividualMove(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitIndividualMove(this);
		}
	}

	[RuleVersion(0)]
	public IndividualMoveContext individualMove() {
		IndividualMoveContext _localctx = new IndividualMoveContext(Context, State);
		EnterRule(_localctx, 16, RULE_individualMove);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			_localctx.foo = TokenStream.Lt(1);
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CASTLE_KINGSIDE) | (1L << CASTLE_QUEENSIDE) | (1L << PIECE_TO_SQUARE) | (1L << CAPTURE))) != 0)) ) {
				_localctx.foo = ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 93;
			_la = TokenStream.La(1);
			if (_la==PROMOTES_TO_PIECE) {
				{
				State = 92; _localctx.promote = Match(PROMOTES_TO_PIECE);
				}
			}

			State = 97;
			switch (TokenStream.La(1)) {
			case CHECK:
				{
				State = 95; _localctx.checkormate = Match(CHECK);
				}
				break;
			case MATE:
				{
				State = 96; _localctx.checkormate = Match(MATE);
				}
				break;
			case Eof:
			case LEFT_TAG:
			case LEFT_BRACKET:
			case RIGHT_BRACKET:
			case CASTLE_KINGSIDE:
			case CASTLE_QUEENSIDE:
			case GAME_RESULT_END_OF_MOVETEXT:
			case PIECE_TO_SQUARE:
			case CAPTURE:
			case MOVE_LABEL:
			case BLOCK_COMMENT:
			case NO_MOVE:
			case NUMERIC_ANNOTATION_GLYPH:
			case MOVE_ANALYSIS:
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 100;
			_la = TokenStream.La(1);
			if (_la==MOVE_ANALYSIS) {
				{
				State = 99; Match(MOVE_ANALYSIS);
				}
			}

			State = 103;
			_la = TokenStream.La(1);
			if (_la==NUMERIC_ANNOTATION_GLYPH) {
				{
				State = 102; _localctx.annotation_glyph = Match(NUMERIC_ANNOTATION_GLYPH);
				}
			}

			State = 106;
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 105; annotationList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveListContext : ParserRuleContext {
		public MoveContext[] move() {
			return GetRuleContexts<MoveContext>();
		}
		public MoveContext move(int i) {
			return GetRuleContext<MoveContext>(i);
		}
		public MoveListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterMoveList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitMoveList(this);
		}
	}

	[RuleVersion(0)]
	public MoveListContext moveList() {
		MoveListContext _localctx = new MoveListContext(Context, State);
		EnterRule(_localctx, 18, RULE_moveList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; move();
			State = 112;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 109; move();
					}
					} 
				}
				State = 114;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveContext : ParserRuleContext {
		public ITerminalNode[] MOVE_LABEL() { return GetTokens(PgnParser.MOVE_LABEL); }
		public ITerminalNode MOVE_LABEL(int i) {
			return GetToken(PgnParser.MOVE_LABEL, i);
		}
		public IndividualMoveContext[] individualMove() {
			return GetRuleContexts<IndividualMoveContext>();
		}
		public IndividualMoveContext individualMove(int i) {
			return GetRuleContext<IndividualMoveContext>(i);
		}
		public ITerminalNode[] NO_MOVE() { return GetTokens(PgnParser.NO_MOVE); }
		public ITerminalNode NO_MOVE(int i) {
			return GetToken(PgnParser.NO_MOVE, i);
		}
		public MoveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_move; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterMove(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitMove(this);
		}
	}

	[RuleVersion(0)]
	public MoveContext move() {
		MoveContext _localctx = new MoveContext(Context, State);
		EnterRule(_localctx, 20, RULE_move);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115; Match(MOVE_LABEL);
			State = 117;
			_la = TokenStream.La(1);
			if (_la==NO_MOVE) {
				{
				State = 116; Match(NO_MOVE);
				}
			}

			State = 119; individualMove();
			State = 127;
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 124;
				_la = TokenStream.La(1);
				if (_la==MOVE_LABEL || _la==NO_MOVE) {
					{
					State = 121;
					_la = TokenStream.La(1);
					if (_la==MOVE_LABEL) {
						{
						State = 120; Match(MOVE_LABEL);
						}
					}

					State = 123; Match(NO_MOVE);
					}
				}

				State = 126; individualMove();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompulsoryTagContext : ParserRuleContext {
		public EventTagContext eventTag() {
			return GetRuleContext<EventTagContext>(0);
		}
		public SiteTagContext siteTag() {
			return GetRuleContext<SiteTagContext>(0);
		}
		public DateTagContext dateTag() {
			return GetRuleContext<DateTagContext>(0);
		}
		public RoundTagContext roundTag() {
			return GetRuleContext<RoundTagContext>(0);
		}
		public BlackTagContext blackTag() {
			return GetRuleContext<BlackTagContext>(0);
		}
		public WhiteTagContext whiteTag() {
			return GetRuleContext<WhiteTagContext>(0);
		}
		public ResultTagContext resultTag() {
			return GetRuleContext<ResultTagContext>(0);
		}
		public CompulsoryTagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compulsoryTag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterCompulsoryTag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitCompulsoryTag(this);
		}
	}

	[RuleVersion(0)]
	public CompulsoryTagContext compulsoryTag() {
		CompulsoryTagContext _localctx = new CompulsoryTagContext(Context, State);
		EnterRule(_localctx, 22, RULE_compulsoryTag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				State = 129; eventTag();
				}
				break;
			case 2:
				{
				State = 130; siteTag();
				}
				break;
			case 3:
				{
				State = 131; dateTag();
				}
				break;
			case 4:
				{
				State = 132; roundTag();
				}
				break;
			case 5:
				{
				State = 133; blackTag();
				}
				break;
			case 6:
				{
				State = 134; whiteTag();
				}
				break;
			case 7:
				{
				State = 135; resultTag();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockCommentContext : ParserRuleContext {
		public IToken comment;
		public ITerminalNode BLOCK_COMMENT() { return GetToken(PgnParser.BLOCK_COMMENT, 0); }
		public BlockCommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockComment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterBlockComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitBlockComment(this);
		}
	}

	[RuleVersion(0)]
	public BlockCommentContext blockComment() {
		BlockCommentContext _localctx = new BlockCommentContext(Context, State);
		EnterRule(_localctx, 24, RULE_blockComment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138; _localctx.comment = Match(BLOCK_COMMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnterVariantContext : ParserRuleContext {
		public ITerminalNode LEFT_BRACKET() { return GetToken(PgnParser.LEFT_BRACKET, 0); }
		public EnterVariantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enterVariant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterEnterVariant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitEnterVariant(this);
		}
	}

	[RuleVersion(0)]
	public EnterVariantContext enterVariant() {
		EnterVariantContext _localctx = new EnterVariantContext(Context, State);
		EnterRule(_localctx, 26, RULE_enterVariant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140; Match(LEFT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeaveVariantContext : ParserRuleContext {
		public ITerminalNode RIGHT_BRACKET() { return GetToken(PgnParser.RIGHT_BRACKET, 0); }
		public LeaveVariantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leaveVariant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterLeaveVariant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitLeaveVariant(this);
		}
	}

	[RuleVersion(0)]
	public LeaveVariantContext leaveVariant() {
		LeaveVariantContext _localctx = new LeaveVariantContext(Context, State);
		EnterRule(_localctx, 28, RULE_leaveVariant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142; Match(RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariantLineContext : ParserRuleContext {
		public EnterVariantContext enterVariant() {
			return GetRuleContext<EnterVariantContext>(0);
		}
		public LeaveVariantContext leaveVariant() {
			return GetRuleContext<LeaveVariantContext>(0);
		}
		public MoveListContext[] moveList() {
			return GetRuleContexts<MoveListContext>();
		}
		public MoveListContext moveList(int i) {
			return GetRuleContext<MoveListContext>(i);
		}
		public VariantLineContext[] variantLine() {
			return GetRuleContexts<VariantLineContext>();
		}
		public VariantLineContext variantLine(int i) {
			return GetRuleContext<VariantLineContext>(i);
		}
		public BlockCommentContext[] blockComment() {
			return GetRuleContexts<BlockCommentContext>();
		}
		public BlockCommentContext blockComment(int i) {
			return GetRuleContext<BlockCommentContext>(i);
		}
		public VariantLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variantLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterVariantLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitVariantLine(this);
		}
	}

	[RuleVersion(0)]
	public VariantLineContext variantLine() {
		VariantLineContext _localctx = new VariantLineContext(Context, State);
		EnterRule(_localctx, 30, RULE_variantLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; enterVariant();
			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT_BRACKET) | (1L << MOVE_LABEL) | (1L << BLOCK_COMMENT))) != 0)) {
				{
				State = 148;
				switch (TokenStream.La(1)) {
				case MOVE_LABEL:
					{
					State = 145; moveList();
					}
					break;
				case LEFT_BRACKET:
					{
					State = 146; variantLine();
					}
					break;
				case BLOCK_COMMENT:
					{
					State = 147; blockComment();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 152;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 153; leaveVariant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventTagContext : ParserRuleContext {
		public IToken tag;
		public ITerminalNode LEFT_TAG() { return GetToken(PgnParser.LEFT_TAG, 0); }
		public ITerminalNode EVENT() { return GetToken(PgnParser.EVENT, 0); }
		public ITerminalNode RIGHT_TAG() { return GetToken(PgnParser.RIGHT_TAG, 0); }
		public ITerminalNode QUOTED_STRING() { return GetToken(PgnParser.QUOTED_STRING, 0); }
		public EventTagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventTag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterEventTag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitEventTag(this);
		}
	}

	[RuleVersion(0)]
	public EventTagContext eventTag() {
		EventTagContext _localctx = new EventTagContext(Context, State);
		EnterRule(_localctx, 32, RULE_eventTag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155; Match(LEFT_TAG);
			State = 156; Match(EVENT);
			State = 157; _localctx.tag = Match(QUOTED_STRING);
			State = 158; Match(RIGHT_TAG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SiteTagContext : ParserRuleContext {
		public IToken tag;
		public ITerminalNode LEFT_TAG() { return GetToken(PgnParser.LEFT_TAG, 0); }
		public ITerminalNode SITE() { return GetToken(PgnParser.SITE, 0); }
		public ITerminalNode RIGHT_TAG() { return GetToken(PgnParser.RIGHT_TAG, 0); }
		public ITerminalNode QUOTED_STRING() { return GetToken(PgnParser.QUOTED_STRING, 0); }
		public SiteTagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_siteTag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterSiteTag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitSiteTag(this);
		}
	}

	[RuleVersion(0)]
	public SiteTagContext siteTag() {
		SiteTagContext _localctx = new SiteTagContext(Context, State);
		EnterRule(_localctx, 34, RULE_siteTag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; Match(LEFT_TAG);
			State = 161; Match(SITE);
			State = 162; _localctx.tag = Match(QUOTED_STRING);
			State = 163; Match(RIGHT_TAG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateTagContext : ParserRuleContext {
		public IToken tag;
		public ITerminalNode LEFT_TAG() { return GetToken(PgnParser.LEFT_TAG, 0); }
		public ITerminalNode DATE() { return GetToken(PgnParser.DATE, 0); }
		public ITerminalNode RIGHT_TAG() { return GetToken(PgnParser.RIGHT_TAG, 0); }
		public ITerminalNode QUOTED_STRING() { return GetToken(PgnParser.QUOTED_STRING, 0); }
		public DateTagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateTag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterDateTag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitDateTag(this);
		}
	}

	[RuleVersion(0)]
	public DateTagContext dateTag() {
		DateTagContext _localctx = new DateTagContext(Context, State);
		EnterRule(_localctx, 36, RULE_dateTag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165; Match(LEFT_TAG);
			State = 166; Match(DATE);
			State = 167; _localctx.tag = Match(QUOTED_STRING);
			State = 168; Match(RIGHT_TAG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoundTagContext : ParserRuleContext {
		public IToken tag;
		public ITerminalNode LEFT_TAG() { return GetToken(PgnParser.LEFT_TAG, 0); }
		public ITerminalNode ROUND() { return GetToken(PgnParser.ROUND, 0); }
		public ITerminalNode RIGHT_TAG() { return GetToken(PgnParser.RIGHT_TAG, 0); }
		public ITerminalNode QUOTED_STRING() { return GetToken(PgnParser.QUOTED_STRING, 0); }
		public RoundTagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roundTag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterRoundTag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitRoundTag(this);
		}
	}

	[RuleVersion(0)]
	public RoundTagContext roundTag() {
		RoundTagContext _localctx = new RoundTagContext(Context, State);
		EnterRule(_localctx, 38, RULE_roundTag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170; Match(LEFT_TAG);
			State = 171; Match(ROUND);
			State = 172; _localctx.tag = Match(QUOTED_STRING);
			State = 173; Match(RIGHT_TAG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlackTagContext : ParserRuleContext {
		public IToken tag;
		public ITerminalNode LEFT_TAG() { return GetToken(PgnParser.LEFT_TAG, 0); }
		public ITerminalNode BLACK() { return GetToken(PgnParser.BLACK, 0); }
		public ITerminalNode RIGHT_TAG() { return GetToken(PgnParser.RIGHT_TAG, 0); }
		public ITerminalNode QUOTED_STRING() { return GetToken(PgnParser.QUOTED_STRING, 0); }
		public BlackTagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blackTag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterBlackTag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitBlackTag(this);
		}
	}

	[RuleVersion(0)]
	public BlackTagContext blackTag() {
		BlackTagContext _localctx = new BlackTagContext(Context, State);
		EnterRule(_localctx, 40, RULE_blackTag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175; Match(LEFT_TAG);
			State = 176; Match(BLACK);
			State = 177; _localctx.tag = Match(QUOTED_STRING);
			State = 178; Match(RIGHT_TAG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhiteTagContext : ParserRuleContext {
		public IToken tag;
		public ITerminalNode LEFT_TAG() { return GetToken(PgnParser.LEFT_TAG, 0); }
		public ITerminalNode WHITE() { return GetToken(PgnParser.WHITE, 0); }
		public ITerminalNode RIGHT_TAG() { return GetToken(PgnParser.RIGHT_TAG, 0); }
		public ITerminalNode QUOTED_STRING() { return GetToken(PgnParser.QUOTED_STRING, 0); }
		public WhiteTagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whiteTag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterWhiteTag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitWhiteTag(this);
		}
	}

	[RuleVersion(0)]
	public WhiteTagContext whiteTag() {
		WhiteTagContext _localctx = new WhiteTagContext(Context, State);
		EnterRule(_localctx, 42, RULE_whiteTag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180; Match(LEFT_TAG);
			State = 181; Match(WHITE);
			State = 182; _localctx.tag = Match(QUOTED_STRING);
			State = 183; Match(RIGHT_TAG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResultTagContext : ParserRuleContext {
		public IToken tag;
		public ITerminalNode LEFT_TAG() { return GetToken(PgnParser.LEFT_TAG, 0); }
		public ITerminalNode RESULT() { return GetToken(PgnParser.RESULT, 0); }
		public ITerminalNode RIGHT_TAG() { return GetToken(PgnParser.RIGHT_TAG, 0); }
		public ITerminalNode GAME_RESULT() { return GetToken(PgnParser.GAME_RESULT, 0); }
		public ResultTagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resultTag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterResultTag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitResultTag(this);
		}
	}

	[RuleVersion(0)]
	public ResultTagContext resultTag() {
		ResultTagContext _localctx = new ResultTagContext(Context, State);
		EnterRule(_localctx, 44, RULE_resultTag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185; Match(LEFT_TAG);
			State = 186; Match(RESULT);
			State = 187; _localctx.tag = Match(GAME_RESULT);
			State = 188; Match(RIGHT_TAG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionalTagContext : ParserRuleContext {
		public IToken tag;
		public IToken tagValue;
		public ITerminalNode LEFT_TAG() { return GetToken(PgnParser.LEFT_TAG, 0); }
		public ITerminalNode RIGHT_TAG() { return GetToken(PgnParser.RIGHT_TAG, 0); }
		public ITerminalNode QUOTED_STRING() { return GetToken(PgnParser.QUOTED_STRING, 0); }
		public ITerminalNode[] TAG_NAME() { return GetTokens(PgnParser.TAG_NAME); }
		public ITerminalNode TAG_NAME(int i) {
			return GetToken(PgnParser.TAG_NAME, i);
		}
		public OptionalTagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionalTag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterOptionalTag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitOptionalTag(this);
		}
	}

	[RuleVersion(0)]
	public OptionalTagContext optionalTag() {
		OptionalTagContext _localctx = new OptionalTagContext(Context, State);
		EnterRule(_localctx, 46, RULE_optionalTag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190; Match(LEFT_TAG);
			State = 192;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 191; _localctx.tag = Match(TAG_NAME);
				}
				}
				State = 194;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==TAG_NAME );
			State = 196; _localctx.tagValue = Match(QUOTED_STRING);
			State = 197; Match(RIGHT_TAG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3%\xCA\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x3\x2\x3\x2\x3\x3"+
		"\x3\x3\x5\x3\x37\n\x3\x3\x4\x3\x4\x3\x4\x3\x5\x6\x5=\n\x5\r\x5\xE\x5>"+
		"\x3\x6\x3\x6\x5\x6\x43\n\x6\x3\x6\x3\x6\a\x6G\n\x6\f\x6\xE\x6J\v\x6\x3"+
		"\a\x3\a\x5\aN\n\a\x3\a\x5\aQ\n\a\x3\b\x3\b\x5\bU\n\b\x3\t\x3\t\a\tY\n"+
		"\t\f\t\xE\t\\\v\t\x3\n\x3\n\x5\n`\n\n\x3\n\x3\n\x5\n\x64\n\n\x3\n\x5\n"+
		"g\n\n\x3\n\x5\nj\n\n\x3\n\x5\nm\n\n\x3\v\x3\v\a\vq\n\v\f\v\xE\vt\v\v\x3"+
		"\f\x3\f\x5\fx\n\f\x3\f\x3\f\x5\f|\n\f\x3\f\x5\f\x7F\n\f\x3\f\x5\f\x82"+
		"\n\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x5\r\x8B\n\r\x3\xE\x3\xE\x3\xF"+
		"\x3\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\a\x11\x97\n\x11\f\x11"+
		"\xE\x11\x9A\v\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3"+
		"\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3"+
		"\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3"+
		"\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3"+
		"\x19\x3\x19\x6\x19\xC3\n\x19\r\x19\xE\x19\xC4\x3\x19\x3\x19\x3\x19\x3"+
		"\x19\x2\x2\x1A\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&"+
		"(*,.\x30\x2\x3\x4\x2\x13\x14\x1C\x1D\xCF\x2\x32\x3\x2\x2\x2\x4\x36\x3"+
		"\x2\x2\x2\x6\x38\x3\x2\x2\x2\b<\x3\x2\x2\x2\n\x42\x3\x2\x2\x2\fK\x3\x2"+
		"\x2\x2\xET\x3\x2\x2\x2\x10V\x3\x2\x2\x2\x12]\x3\x2\x2\x2\x14n\x3\x2\x2"+
		"\x2\x16u\x3\x2\x2\x2\x18\x8A\x3\x2\x2\x2\x1A\x8C\x3\x2\x2\x2\x1C\x8E\x3"+
		"\x2\x2\x2\x1E\x90\x3\x2\x2\x2 \x92\x3\x2\x2\x2\"\x9D\x3\x2\x2\x2$\xA2"+
		"\x3\x2\x2\x2&\xA7\x3\x2\x2\x2(\xAC\x3\x2\x2\x2*\xB1\x3\x2\x2\x2,\xB6\x3"+
		"\x2\x2\x2.\xBB\x3\x2\x2\x2\x30\xC0\x3\x2\x2\x2\x32\x33\x5\x6\x4\x2\x33"+
		"\x3\x3\x2\x2\x2\x34\x37\x5\x18\r\x2\x35\x37\x5\x30\x19\x2\x36\x34\x3\x2"+
		"\x2\x2\x36\x35\x3\x2\x2\x2\x37\x5\x3\x2\x2\x2\x38\x39\x5\b\x5\x2\x39:"+
		"\a\x2\x2\x3:\a\x3\x2\x2\x2;=\x5\f\a\x2<;\x3\x2\x2\x2=>\x3\x2\x2\x2><\x3"+
		"\x2\x2\x2>?\x3\x2\x2\x2?\t\x3\x2\x2\x2@\x43\x5\x30\x19\x2\x41\x43\x5\x18"+
		"\r\x2\x42@\x3\x2\x2\x2\x42\x41\x3\x2\x2\x2\x43H\x3\x2\x2\x2\x44G\x5\x30"+
		"\x19\x2\x45G\x5\x18\r\x2\x46\x44\x3\x2\x2\x2\x46\x45\x3\x2\x2\x2GJ\x3"+
		"\x2\x2\x2H\x46\x3\x2\x2\x2HI\x3\x2\x2\x2I\v\x3\x2\x2\x2JH\x3\x2\x2\x2"+
		"KM\x5\n\x6\x2LN\x5\x14\v\x2ML\x3\x2\x2\x2MN\x3\x2\x2\x2NP\x3\x2\x2\x2"+
		"OQ\a\x1A\x2\x2PO\x3\x2\x2\x2PQ\x3\x2\x2\x2Q\r\x3\x2\x2\x2RU\x5\x1A\xE"+
		"\x2SU\x5 \x11\x2TR\x3\x2\x2\x2TS\x3\x2\x2\x2U\xF\x3\x2\x2\x2VZ\x5\xE\b"+
		"\x2WY\x5\xE\b\x2XW\x3\x2\x2\x2Y\\\x3\x2\x2\x2ZX\x3\x2\x2\x2Z[\x3\x2\x2"+
		"\x2[\x11\x3\x2\x2\x2\\Z\x3\x2\x2\x2]_\t\x2\x2\x2^`\a\x1E\x2\x2_^\x3\x2"+
		"\x2\x2_`\x3\x2\x2\x2`\x63\x3\x2\x2\x2\x61\x64\a\x12\x2\x2\x62\x64\a\x11"+
		"\x2\x2\x63\x61\x3\x2\x2\x2\x63\x62\x3\x2\x2\x2\x63\x64\x3\x2\x2\x2\x64"+
		"\x66\x3\x2\x2\x2\x65g\a%\x2\x2\x66\x65\x3\x2\x2\x2\x66g\x3\x2\x2\x2gi"+
		"\x3\x2\x2\x2hj\a$\x2\x2ih\x3\x2\x2\x2ij\x3\x2\x2\x2jl\x3\x2\x2\x2km\x5"+
		"\x10\t\x2lk\x3\x2\x2\x2lm\x3\x2\x2\x2m\x13\x3\x2\x2\x2nr\x5\x16\f\x2o"+
		"q\x5\x16\f\x2po\x3\x2\x2\x2qt\x3\x2\x2\x2rp\x3\x2\x2\x2rs\x3\x2\x2\x2"+
		"s\x15\x3\x2\x2\x2tr\x3\x2\x2\x2uw\a \x2\x2vx\a\"\x2\x2wv\x3\x2\x2\x2w"+
		"x\x3\x2\x2\x2xy\x3\x2\x2\x2y\x81\x5\x12\n\x2z|\a \x2\x2{z\x3\x2\x2\x2"+
		"{|\x3\x2\x2\x2|}\x3\x2\x2\x2}\x7F\a\"\x2\x2~{\x3\x2\x2\x2~\x7F\x3\x2\x2"+
		"\x2\x7F\x80\x3\x2\x2\x2\x80\x82\x5\x12\n\x2\x81~\x3\x2\x2\x2\x81\x82\x3"+
		"\x2\x2\x2\x82\x17\x3\x2\x2\x2\x83\x8B\x5\"\x12\x2\x84\x8B\x5$\x13\x2\x85"+
		"\x8B\x5&\x14\x2\x86\x8B\x5(\x15\x2\x87\x8B\x5*\x16\x2\x88\x8B\x5,\x17"+
		"\x2\x89\x8B\x5.\x18\x2\x8A\x83\x3\x2\x2\x2\x8A\x84\x3\x2\x2\x2\x8A\x85"+
		"\x3\x2\x2\x2\x8A\x86\x3\x2\x2\x2\x8A\x87\x3\x2\x2\x2\x8A\x88\x3\x2\x2"+
		"\x2\x8A\x89\x3\x2\x2\x2\x8B\x19\x3\x2\x2\x2\x8C\x8D\a!\x2\x2\x8D\x1B\x3"+
		"\x2\x2\x2\x8E\x8F\a\a\x2\x2\x8F\x1D\x3\x2\x2\x2\x90\x91\a\b\x2\x2\x91"+
		"\x1F\x3\x2\x2\x2\x92\x98\x5\x1C\xF\x2\x93\x97\x5\x14\v\x2\x94\x97\x5 "+
		"\x11\x2\x95\x97\x5\x1A\xE\x2\x96\x93\x3\x2\x2\x2\x96\x94\x3\x2\x2\x2\x96"+
		"\x95\x3\x2\x2\x2\x97\x9A\x3\x2\x2\x2\x98\x96\x3\x2\x2\x2\x98\x99\x3\x2"+
		"\x2\x2\x99\x9B\x3\x2\x2\x2\x9A\x98\x3\x2\x2\x2\x9B\x9C\x5\x1E\x10\x2\x9C"+
		"!\x3\x2\x2\x2\x9D\x9E\a\x3\x2\x2\x9E\x9F\a\n\x2\x2\x9F\xA0\a\x1B\x2\x2"+
		"\xA0\xA1\a\x4\x2\x2\xA1#\x3\x2\x2\x2\xA2\xA3\a\x3\x2\x2\xA3\xA4\a\v\x2"+
		"\x2\xA4\xA5\a\x1B\x2\x2\xA5\xA6\a\x4\x2\x2\xA6%\x3\x2\x2\x2\xA7\xA8\a"+
		"\x3\x2\x2\xA8\xA9\a\f\x2\x2\xA9\xAA\a\x1B\x2\x2\xAA\xAB\a\x4\x2\x2\xAB"+
		"\'\x3\x2\x2\x2\xAC\xAD\a\x3\x2\x2\xAD\xAE\a\r\x2\x2\xAE\xAF\a\x1B\x2\x2"+
		"\xAF\xB0\a\x4\x2\x2\xB0)\x3\x2\x2\x2\xB1\xB2\a\x3\x2\x2\xB2\xB3\a\xF\x2"+
		"\x2\xB3\xB4\a\x1B\x2\x2\xB4\xB5\a\x4\x2\x2\xB5+\x3\x2\x2\x2\xB6\xB7\a"+
		"\x3\x2\x2\xB7\xB8\a\xE\x2\x2\xB8\xB9\a\x1B\x2\x2\xB9\xBA\a\x4\x2\x2\xBA"+
		"-\x3\x2\x2\x2\xBB\xBC\a\x3\x2\x2\xBC\xBD\a\x10\x2\x2\xBD\xBE\a\x19\x2"+
		"\x2\xBE\xBF\a\x4\x2\x2\xBF/\x3\x2\x2\x2\xC0\xC2\a\x3\x2\x2\xC1\xC3\a#"+
		"\x2\x2\xC2\xC1\x3\x2\x2\x2\xC3\xC4\x3\x2\x2\x2\xC4\xC2\x3\x2\x2\x2\xC4"+
		"\xC5\x3\x2\x2\x2\xC5\xC6\x3\x2\x2\x2\xC6\xC7\a\x1B\x2\x2\xC7\xC8\a\x4"+
		"\x2\x2\xC8\x31\x3\x2\x2\x2\x19\x36>\x42\x46HMPTZ_\x63\x66ilrw{~\x81\x8A"+
		"\x96\x98\xC4";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Redchess.Pgn
