//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Pgn.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591


using System.Collections.Generic;

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class PgnParser : Parser {
	public const int
		LEFT_TAG=1, RIGHT_TAG=2, LEFT_CURLY_BRACKET=3, RIGHT_CURLY_BRACKET=4, 
		LEFT_BRACKET=5, RIGHT_BRACKET=6, QUOTE=7, EVENT=8, SITE=9, DATE=10, ROUND=11, 
		WHITE=12, BLACK=13, RESULT=14, MATE=15, CHECK=16, CASTLE_KINGSIDE=17, 
		CASTLE_QUEENSIDE=18, PROMOTES_TO=19, TAKES=20, WS=21, LINE_COMMENT=22, 
		GAME_RESULT=23, GAME_RESULT_END_OF_MOVETEXT=24, QUOTED_STRING=25, PIECE_TO_SQUARE=26, 
		CAPTURE=27, PROMOTES_TO_PIECE=28, INTEGER=29, MOVE_LABEL=30, BLOCK_COMMENT=31, 
		NO_MOVE=32, TAG_NAME=33, NUMERIC_ANNOTATION_GLYPH=34, MOVE_ANALYSIS=35;
	public const int
		RULE_parse = 0, RULE_parseTag = 1, RULE_document = 2, RULE_gameList = 3, 
		RULE_generalTagList = 4, RULE_game = 5, RULE_annotation = 6, RULE_annotationList = 7, 
		RULE_individualMove = 8, RULE_moveList = 9, RULE_move = 10, RULE_compulsoryTag = 11, 
		RULE_blockComment = 12, RULE_enterVariant = 13, RULE_leaveVariant = 14, 
		RULE_variantLine = 15, RULE_eventTag = 16, RULE_siteTag = 17, RULE_dateTag = 18, 
		RULE_roundTag = 19, RULE_blackTag = 20, RULE_whiteTag = 21, RULE_resultTag = 22, 
		RULE_optionalTag = 23;
	public static readonly string[] ruleNames = {
		"parse", "parseTag", "document", "gameList", "generalTagList", "game", 
		"annotation", "annotationList", "individualMove", "moveList", "move", 
		"compulsoryTag", "blockComment", "enterVariant", "leaveVariant", "variantLine", 
		"eventTag", "siteTag", "dateTag", "roundTag", "blackTag", "whiteTag", 
		"resultTag", "optionalTag"
	};

	private static readonly string[] _LiteralNames = {
		null, "'['", "']'", "'{'", "'}'", "'('", "')'", "'\"'", "'Event'", "'Site'", 
		"'Date'", "'Round'", "'White'", "'Black'", "'Result'", "'#'", "'+'", "'O-O'", 
		"'O-O-O'", "'='", "'x'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LEFT_TAG", "RIGHT_TAG", "LEFT_CURLY_BRACKET", "RIGHT_CURLY_BRACKET", 
		"LEFT_BRACKET", "RIGHT_BRACKET", "QUOTE", "EVENT", "SITE", "DATE", "ROUND", 
		"WHITE", "BLACK", "RESULT", "MATE", "CHECK", "CASTLE_KINGSIDE", "CASTLE_QUEENSIDE", 
		"PROMOTES_TO", "TAKES", "WS", "LINE_COMMENT", "GAME_RESULT", "GAME_RESULT_END_OF_MOVETEXT", 
		"QUOTED_STRING", "PIECE_TO_SQUARE", "CAPTURE", "PROMOTES_TO_PIECE", "INTEGER", 
		"MOVE_LABEL", "BLOCK_COMMENT", "NO_MOVE", "TAG_NAME", "NUMERIC_ANNOTATION_GLYPH", 
		"MOVE_ANALYSIS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Pgn.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }


		private int m_variantDepth = 0;
		public bool PlayGame;
	    private static char[] c_doubleQuote = new [] { '"' }; 

		private Dictionary<string,string> m_optionalTags = new Dictionary<string,string>();
		public IDictionary<string,string> OptionalTags { get { return m_optionalTags; } }

		public string Event { get; private set; }
		public string Site { get; private set; }
		public string Date { get; private set; }
		public string Round { get; private set; }
		public string Black { get; private set; }
		public string White { get; private set; }
		public string Result { get; private set; }

	public PgnParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class ParseContext : ParserRuleContext {
		public DocumentContext document() {
			return GetRuleContext<DocumentContext>(0);
		}
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterParse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitParse(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(Context, State);
		EnterRule(_localctx, 0, RULE_parse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48; document();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParseTagContext : ParserRuleContext {
		public CompulsoryTagContext compulsoryTag() {
			return GetRuleContext<CompulsoryTagContext>(0);
		}
		public OptionalTagContext optionalTag() {
			return GetRuleContext<OptionalTagContext>(0);
		}
		public ParseTagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parseTag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterParseTag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitParseTag(this);
		}
	}

	[RuleVersion(0)]
	public ParseTagContext parseTag() {
		ParseTagContext _localctx = new ParseTagContext(Context, State);
		EnterRule(_localctx, 2, RULE_parseTag);
		try {
			State = 52;
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 50; compulsoryTag();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 51; optionalTag();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DocumentContext : ParserRuleContext {
		public GameListContext gameList() {
			return GetRuleContext<GameListContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(PgnParser.Eof, 0); }
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterDocument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitDocument(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(Context, State);
		EnterRule(_localctx, 4, RULE_document);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54; gameList();
			State = 55; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GameListContext : ParserRuleContext {
		public GameContext[] game() {
			return GetRuleContexts<GameContext>();
		}
		public GameContext game(int i) {
			return GetRuleContext<GameContext>(i);
		}
		public GameListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gameList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterGameList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitGameList(this);
		}
	}

	[RuleVersion(0)]
	public GameListContext gameList() {
		GameListContext _localctx = new GameListContext(Context, State);
		EnterRule(_localctx, 6, RULE_gameList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 57; game();
				}
				}
				State = 60;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==LEFT_TAG );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeneralTagListContext : ParserRuleContext {
		public OptionalTagContext[] optionalTag() {
			return GetRuleContexts<OptionalTagContext>();
		}
		public OptionalTagContext optionalTag(int i) {
			return GetRuleContext<OptionalTagContext>(i);
		}
		public CompulsoryTagContext[] compulsoryTag() {
			return GetRuleContexts<CompulsoryTagContext>();
		}
		public CompulsoryTagContext compulsoryTag(int i) {
			return GetRuleContext<CompulsoryTagContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(PgnParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(PgnParser.WS, i);
		}
		public GeneralTagListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generalTagList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterGeneralTagList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitGeneralTagList(this);
		}
	}

	[RuleVersion(0)]
	public GeneralTagListContext generalTagList() {
		GeneralTagListContext _localctx = new GeneralTagListContext(Context, State);
		EnterRule(_localctx, 8, RULE_generalTagList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 62; optionalTag();
				}
				break;
			case 2:
				{
				State = 63; compulsoryTag();
				}
				break;
			}
			State = 78;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 69;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					while (_la==WS) {
						{
						{
						State = 66; Match(WS);
						}
						}
						State = 71;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					}
					State = 74;
					switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
					case 1:
						{
						State = 72; optionalTag();
						}
						break;
					case 2:
						{
						State = 73; compulsoryTag();
						}
						break;
					}
					}
					} 
				}
				State = 80;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GameContext : ParserRuleContext {
		public GeneralTagListContext generalTagList() {
			return GetRuleContext<GeneralTagListContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(PgnParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(PgnParser.WS, i);
		}
		public MoveListContext moveList() {
			return GetRuleContext<MoveListContext>(0);
		}
		public ITerminalNode GAME_RESULT_END_OF_MOVETEXT() { return GetToken(PgnParser.GAME_RESULT_END_OF_MOVETEXT, 0); }
		public GameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_game; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterGame(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitGame(this);
		}
	}

	[RuleVersion(0)]
	public GameContext game() {
		GameContext _localctx = new GameContext(Context, State);
		EnterRule(_localctx, 10, RULE_game);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 81; generalTagList();
			State = 83;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 82; Match(WS);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 85;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 88;
			_la = TokenStream.La(1);
			if (_la==MOVE_LABEL) {
				{
				State = 87; moveList();
				}
			}

			State = 93;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 90; Match(WS);
					}
					} 
				}
				State = 95;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			State = 97;
			_la = TokenStream.La(1);
			if (_la==GAME_RESULT_END_OF_MOVETEXT) {
				{
				State = 96; Match(GAME_RESULT_END_OF_MOVETEXT);
				}
			}

			State = 102;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==WS) {
				{
				{
				State = 99; Match(WS);
				}
				}
				State = 104;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}

				if(PlayGame)
				{
					m_processor.ResetGame();
					m_optionalTags.Clear();
				}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		public BlockCommentContext blockComment() {
			return GetRuleContext<BlockCommentContext>(0);
		}
		public VariantLineContext variantLine() {
			return GetRuleContext<VariantLineContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 12, RULE_annotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			switch (TokenStream.La(1)) {
			case BLOCK_COMMENT:
				{
				State = 107; blockComment();
				}
				break;
			case LEFT_BRACKET:
				{
				State = 108; variantLine();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationListContext : ParserRuleContext {
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(PgnParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(PgnParser.WS, i);
		}
		public AnnotationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterAnnotationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitAnnotationList(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationListContext annotationList() {
		AnnotationListContext _localctx = new AnnotationListContext(Context, State);
		EnterRule(_localctx, 14, RULE_annotationList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 111; annotation();
			State = 120;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 113;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					do {
						{
						{
						State = 112; Match(WS);
						}
						}
						State = 115;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					} while ( _la==WS );
					State = 117; annotation();
					}
					} 
				}
				State = 122;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndividualMoveContext : ParserRuleContext {
		public IToken foo;
		public IToken promote;
		public IToken checkormate;
		public IToken annotation_glyph;
		public ITerminalNode PIECE_TO_SQUARE() { return GetToken(PgnParser.PIECE_TO_SQUARE, 0); }
		public ITerminalNode CAPTURE() { return GetToken(PgnParser.CAPTURE, 0); }
		public ITerminalNode CASTLE_KINGSIDE() { return GetToken(PgnParser.CASTLE_KINGSIDE, 0); }
		public ITerminalNode CASTLE_QUEENSIDE() { return GetToken(PgnParser.CASTLE_QUEENSIDE, 0); }
		public ITerminalNode MOVE_ANALYSIS() { return GetToken(PgnParser.MOVE_ANALYSIS, 0); }
		public AnnotationListContext annotationList() {
			return GetRuleContext<AnnotationListContext>(0);
		}
		public ITerminalNode PROMOTES_TO_PIECE() { return GetToken(PgnParser.PROMOTES_TO_PIECE, 0); }
		public ITerminalNode CHECK() { return GetToken(PgnParser.CHECK, 0); }
		public ITerminalNode MATE() { return GetToken(PgnParser.MATE, 0); }
		public ITerminalNode NUMERIC_ANNOTATION_GLYPH() { return GetToken(PgnParser.NUMERIC_ANNOTATION_GLYPH, 0); }
		public ITerminalNode[] WS() { return GetTokens(PgnParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(PgnParser.WS, i);
		}
		public IndividualMoveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_individualMove; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterIndividualMove(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitIndividualMove(this);
		}
	}

	[RuleVersion(0)]
	public IndividualMoveContext individualMove() {
		IndividualMoveContext _localctx = new IndividualMoveContext(Context, State);
		EnterRule(_localctx, 16, RULE_individualMove);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			_localctx.foo = TokenStream.Lt(1);
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CASTLE_KINGSIDE) | (1L << CASTLE_QUEENSIDE) | (1L << PIECE_TO_SQUARE) | (1L << CAPTURE))) != 0)) ) {
				_localctx.foo = ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 125;
			_la = TokenStream.La(1);
			if (_la==PROMOTES_TO_PIECE) {
				{
				State = 124; _localctx.promote = Match(PROMOTES_TO_PIECE);
				}
			}

			State = 129;
			switch (TokenStream.La(1)) {
			case CHECK:
				{
				State = 127; _localctx.checkormate = Match(CHECK);
				}
				break;
			case MATE:
				{
				State = 128; _localctx.checkormate = Match(MATE);
				}
				break;
			case Eof:
			case LEFT_TAG:
			case LEFT_BRACKET:
			case RIGHT_BRACKET:
			case WS:
			case GAME_RESULT_END_OF_MOVETEXT:
			case MOVE_LABEL:
			case BLOCK_COMMENT:
			case MOVE_ANALYSIS:
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 132;
			_la = TokenStream.La(1);
			if (_la==MOVE_ANALYSIS) {
				{
				State = 131; Match(MOVE_ANALYSIS);
				}
			}

			State = 140;
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 135;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				do {
					{
					{
					State = 134; Match(WS);
					}
					}
					State = 137;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				} while ( _la==WS );
				State = 139; _localctx.annotation_glyph = Match(NUMERIC_ANNOTATION_GLYPH);
				}
				break;
			}
			State = 148;
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				do {
					{
					{
					State = 142; Match(WS);
					}
					}
					State = 145;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				} while ( _la==WS );
				State = 147; annotationList();
				}
				break;
			}

				if(PlayGame && m_variantDepth == 0)
					m_processor.ProcessMove(_localctx.foo, _localctx.promote == null ? "" : _localctx.promote.Text.TrimStart(new [] {'='}), _localctx.checkormate == null ? "" : _localctx.checkormate.Text, _localctx.annotation_glyph == null ? "" : _localctx.annotation_glyph.Text);

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveListContext : ParserRuleContext {
		public MoveContext[] move() {
			return GetRuleContexts<MoveContext>();
		}
		public MoveContext move(int i) {
			return GetRuleContext<MoveContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(PgnParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(PgnParser.WS, i);
		}
		public MoveListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterMoveList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitMoveList(this);
		}
	}

	[RuleVersion(0)]
	public MoveListContext moveList() {
		MoveListContext _localctx = new MoveListContext(Context, State);
		EnterRule(_localctx, 18, RULE_moveList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; move();
			State = 161;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 154;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					do {
						{
						{
						State = 153; Match(WS);
						}
						}
						State = 156;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					} while ( _la==WS );
					State = 158; move();
					}
					} 
				}
				State = 163;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveContext : ParserRuleContext {
		public ITerminalNode[] MOVE_LABEL() { return GetTokens(PgnParser.MOVE_LABEL); }
		public ITerminalNode MOVE_LABEL(int i) {
			return GetToken(PgnParser.MOVE_LABEL, i);
		}
		public IndividualMoveContext[] individualMove() {
			return GetRuleContexts<IndividualMoveContext>();
		}
		public IndividualMoveContext individualMove(int i) {
			return GetRuleContext<IndividualMoveContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(PgnParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(PgnParser.WS, i);
		}
		public ITerminalNode[] NO_MOVE() { return GetTokens(PgnParser.NO_MOVE); }
		public ITerminalNode NO_MOVE(int i) {
			return GetToken(PgnParser.NO_MOVE, i);
		}
		public MoveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_move; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterMove(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitMove(this);
		}
	}

	[RuleVersion(0)]
	public MoveContext move() {
		MoveContext _localctx = new MoveContext(Context, State);
		EnterRule(_localctx, 20, RULE_move);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 164; Match(MOVE_LABEL);
			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==WS) {
				{
				{
				State = 165; Match(WS);
				}
				}
				State = 170;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 178;
			_la = TokenStream.La(1);
			if (_la==NO_MOVE) {
				{
				State = 171; Match(NO_MOVE);
				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==WS) {
					{
					{
					State = 172; Match(WS);
					}
					}
					State = 177;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			State = 180; individualMove();
			State = 205;
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				State = 182;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 181; Match(WS);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 184;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 202;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << WS) | (1L << MOVE_LABEL) | (1L << NO_MOVE))) != 0)) {
					{
					State = 187;
					_la = TokenStream.La(1);
					if (_la==MOVE_LABEL) {
						{
						State = 186; Match(MOVE_LABEL);
						}
					}

					State = 192;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					while (_la==WS) {
						{
						{
						State = 189; Match(WS);
						}
						}
						State = 194;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					}
					State = 195; Match(NO_MOVE);
					State = 199;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					while (_la==WS) {
						{
						{
						State = 196; Match(WS);
						}
						}
						State = 201;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					}
					}
				}

				State = 204; individualMove();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompulsoryTagContext : ParserRuleContext {
		public EventTagContext eventTag() {
			return GetRuleContext<EventTagContext>(0);
		}
		public SiteTagContext siteTag() {
			return GetRuleContext<SiteTagContext>(0);
		}
		public DateTagContext dateTag() {
			return GetRuleContext<DateTagContext>(0);
		}
		public RoundTagContext roundTag() {
			return GetRuleContext<RoundTagContext>(0);
		}
		public BlackTagContext blackTag() {
			return GetRuleContext<BlackTagContext>(0);
		}
		public WhiteTagContext whiteTag() {
			return GetRuleContext<WhiteTagContext>(0);
		}
		public ResultTagContext resultTag() {
			return GetRuleContext<ResultTagContext>(0);
		}
		public CompulsoryTagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compulsoryTag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterCompulsoryTag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitCompulsoryTag(this);
		}
	}

	[RuleVersion(0)]
	public CompulsoryTagContext compulsoryTag() {
		CompulsoryTagContext _localctx = new CompulsoryTagContext(Context, State);
		EnterRule(_localctx, 22, RULE_compulsoryTag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 207; eventTag();
				}
				break;
			case 2:
				{
				State = 208; siteTag();
				}
				break;
			case 3:
				{
				State = 209; dateTag();
				}
				break;
			case 4:
				{
				State = 210; roundTag();
				}
				break;
			case 5:
				{
				State = 211; blackTag();
				}
				break;
			case 6:
				{
				State = 212; whiteTag();
				}
				break;
			case 7:
				{
				State = 213; resultTag();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockCommentContext : ParserRuleContext {
		public IToken comment;
		public ITerminalNode BLOCK_COMMENT() { return GetToken(PgnParser.BLOCK_COMMENT, 0); }
		public BlockCommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockComment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterBlockComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitBlockComment(this);
		}
	}

	[RuleVersion(0)]
	public BlockCommentContext blockComment() {
		BlockCommentContext _localctx = new BlockCommentContext(Context, State);
		EnterRule(_localctx, 24, RULE_blockComment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216; _localctx.comment = Match(BLOCK_COMMENT);

				// Console.WriteLine(comment.Text);

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnterVariantContext : ParserRuleContext {
		public ITerminalNode LEFT_BRACKET() { return GetToken(PgnParser.LEFT_BRACKET, 0); }
		public EnterVariantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enterVariant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterEnterVariant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitEnterVariant(this);
		}
	}

	[RuleVersion(0)]
	public EnterVariantContext enterVariant() {
		EnterVariantContext _localctx = new EnterVariantContext(Context, State);
		EnterRule(_localctx, 26, RULE_enterVariant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219; Match(LEFT_BRACKET);

				m_variantDepth++;

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeaveVariantContext : ParserRuleContext {
		public ITerminalNode RIGHT_BRACKET() { return GetToken(PgnParser.RIGHT_BRACKET, 0); }
		public LeaveVariantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leaveVariant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterLeaveVariant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitLeaveVariant(this);
		}
	}

	[RuleVersion(0)]
	public LeaveVariantContext leaveVariant() {
		LeaveVariantContext _localctx = new LeaveVariantContext(Context, State);
		EnterRule(_localctx, 28, RULE_leaveVariant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222; Match(RIGHT_BRACKET);

				m_variantDepth--;

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariantLineContext : ParserRuleContext {
		public EnterVariantContext enterVariant() {
			return GetRuleContext<EnterVariantContext>(0);
		}
		public LeaveVariantContext leaveVariant() {
			return GetRuleContext<LeaveVariantContext>(0);
		}
		public MoveListContext[] moveList() {
			return GetRuleContexts<MoveListContext>();
		}
		public MoveListContext moveList(int i) {
			return GetRuleContext<MoveListContext>(i);
		}
		public VariantLineContext[] variantLine() {
			return GetRuleContexts<VariantLineContext>();
		}
		public VariantLineContext variantLine(int i) {
			return GetRuleContext<VariantLineContext>(i);
		}
		public BlockCommentContext[] blockComment() {
			return GetRuleContexts<BlockCommentContext>();
		}
		public BlockCommentContext blockComment(int i) {
			return GetRuleContext<BlockCommentContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(PgnParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(PgnParser.WS, i);
		}
		public VariantLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variantLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterVariantLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitVariantLine(this);
		}
	}

	[RuleVersion(0)]
	public VariantLineContext variantLine() {
		VariantLineContext _localctx = new VariantLineContext(Context, State);
		EnterRule(_localctx, 30, RULE_variantLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225; enterVariant();
			State = 231;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT_BRACKET) | (1L << MOVE_LABEL) | (1L << BLOCK_COMMENT))) != 0)) {
				{
				State = 229;
				switch (TokenStream.La(1)) {
				case MOVE_LABEL:
					{
					State = 226; moveList();
					}
					break;
				case LEFT_BRACKET:
					{
					State = 227; variantLine();
					}
					break;
				case BLOCK_COMMENT:
					{
					State = 228; blockComment();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 233;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 237;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==WS) {
				{
				{
				State = 234; Match(WS);
				}
				}
				State = 239;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 240; leaveVariant();

				// Console.WriteLine(actual_text.Text);

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventTagContext : ParserRuleContext {
		public IToken bar;
		public ITerminalNode LEFT_TAG() { return GetToken(PgnParser.LEFT_TAG, 0); }
		public ITerminalNode EVENT() { return GetToken(PgnParser.EVENT, 0); }
		public ITerminalNode RIGHT_TAG() { return GetToken(PgnParser.RIGHT_TAG, 0); }
		public ITerminalNode QUOTED_STRING() { return GetToken(PgnParser.QUOTED_STRING, 0); }
		public ITerminalNode[] WS() { return GetTokens(PgnParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(PgnParser.WS, i);
		}
		public EventTagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventTag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterEventTag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitEventTag(this);
		}
	}

	[RuleVersion(0)]
	public EventTagContext eventTag() {
		EventTagContext _localctx = new EventTagContext(Context, State);
		EnterRule(_localctx, 32, RULE_eventTag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243; Match(LEFT_TAG);
			State = 244; Match(EVENT);
			State = 246;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 245; Match(WS);
				}
				}
				State = 248;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==WS );
			State = 250; _localctx.bar = Match(QUOTED_STRING);
			State = 251; Match(RIGHT_TAG);
			 
				Event = _localctx.bar.Text.Trim(c_doubleQuote).Replace("\"\"", "\""); 

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SiteTagContext : ParserRuleContext {
		public IToken bar;
		public ITerminalNode LEFT_TAG() { return GetToken(PgnParser.LEFT_TAG, 0); }
		public ITerminalNode SITE() { return GetToken(PgnParser.SITE, 0); }
		public ITerminalNode RIGHT_TAG() { return GetToken(PgnParser.RIGHT_TAG, 0); }
		public ITerminalNode QUOTED_STRING() { return GetToken(PgnParser.QUOTED_STRING, 0); }
		public ITerminalNode[] WS() { return GetTokens(PgnParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(PgnParser.WS, i);
		}
		public SiteTagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_siteTag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterSiteTag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitSiteTag(this);
		}
	}

	[RuleVersion(0)]
	public SiteTagContext siteTag() {
		SiteTagContext _localctx = new SiteTagContext(Context, State);
		EnterRule(_localctx, 34, RULE_siteTag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254; Match(LEFT_TAG);
			State = 255; Match(SITE);
			State = 257;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 256; Match(WS);
				}
				}
				State = 259;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==WS );
			State = 261; _localctx.bar = Match(QUOTED_STRING);
			State = 262; Match(RIGHT_TAG);
			 
				Site = _localctx.bar.Text.Trim(c_doubleQuote).Replace("\"\"", "\""); 

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateTagContext : ParserRuleContext {
		public IToken bar;
		public ITerminalNode LEFT_TAG() { return GetToken(PgnParser.LEFT_TAG, 0); }
		public ITerminalNode DATE() { return GetToken(PgnParser.DATE, 0); }
		public ITerminalNode RIGHT_TAG() { return GetToken(PgnParser.RIGHT_TAG, 0); }
		public ITerminalNode QUOTED_STRING() { return GetToken(PgnParser.QUOTED_STRING, 0); }
		public ITerminalNode[] WS() { return GetTokens(PgnParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(PgnParser.WS, i);
		}
		public DateTagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateTag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterDateTag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitDateTag(this);
		}
	}

	[RuleVersion(0)]
	public DateTagContext dateTag() {
		DateTagContext _localctx = new DateTagContext(Context, State);
		EnterRule(_localctx, 36, RULE_dateTag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265; Match(LEFT_TAG);
			State = 266; Match(DATE);
			State = 268;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 267; Match(WS);
				}
				}
				State = 270;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==WS );
			State = 272; _localctx.bar = Match(QUOTED_STRING);
			State = 273; Match(RIGHT_TAG);
			 
				Date = _localctx.bar.Text.Trim(c_doubleQuote).Replace("\"\"", "\""); 

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoundTagContext : ParserRuleContext {
		public IToken bar;
		public ITerminalNode LEFT_TAG() { return GetToken(PgnParser.LEFT_TAG, 0); }
		public ITerminalNode ROUND() { return GetToken(PgnParser.ROUND, 0); }
		public ITerminalNode RIGHT_TAG() { return GetToken(PgnParser.RIGHT_TAG, 0); }
		public ITerminalNode QUOTED_STRING() { return GetToken(PgnParser.QUOTED_STRING, 0); }
		public ITerminalNode[] WS() { return GetTokens(PgnParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(PgnParser.WS, i);
		}
		public RoundTagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roundTag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterRoundTag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitRoundTag(this);
		}
	}

	[RuleVersion(0)]
	public RoundTagContext roundTag() {
		RoundTagContext _localctx = new RoundTagContext(Context, State);
		EnterRule(_localctx, 38, RULE_roundTag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276; Match(LEFT_TAG);
			State = 277; Match(ROUND);
			State = 279;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 278; Match(WS);
				}
				}
				State = 281;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==WS );
			State = 283; _localctx.bar = Match(QUOTED_STRING);
			State = 284; Match(RIGHT_TAG);
			 
				Round = _localctx.bar.Text.Trim(c_doubleQuote).Replace("\"\"", "\""); 

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlackTagContext : ParserRuleContext {
		public IToken bar;
		public ITerminalNode LEFT_TAG() { return GetToken(PgnParser.LEFT_TAG, 0); }
		public ITerminalNode BLACK() { return GetToken(PgnParser.BLACK, 0); }
		public ITerminalNode RIGHT_TAG() { return GetToken(PgnParser.RIGHT_TAG, 0); }
		public ITerminalNode QUOTED_STRING() { return GetToken(PgnParser.QUOTED_STRING, 0); }
		public ITerminalNode[] WS() { return GetTokens(PgnParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(PgnParser.WS, i);
		}
		public BlackTagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blackTag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterBlackTag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitBlackTag(this);
		}
	}

	[RuleVersion(0)]
	public BlackTagContext blackTag() {
		BlackTagContext _localctx = new BlackTagContext(Context, State);
		EnterRule(_localctx, 40, RULE_blackTag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287; Match(LEFT_TAG);
			State = 288; Match(BLACK);
			State = 290;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 289; Match(WS);
				}
				}
				State = 292;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==WS );
			State = 294; _localctx.bar = Match(QUOTED_STRING);
			State = 295; Match(RIGHT_TAG);
			 
				Black = _localctx.bar.Text.Trim(c_doubleQuote).Replace("\"\"", "\""); 

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhiteTagContext : ParserRuleContext {
		public IToken bar;
		public ITerminalNode LEFT_TAG() { return GetToken(PgnParser.LEFT_TAG, 0); }
		public ITerminalNode WHITE() { return GetToken(PgnParser.WHITE, 0); }
		public ITerminalNode RIGHT_TAG() { return GetToken(PgnParser.RIGHT_TAG, 0); }
		public ITerminalNode QUOTED_STRING() { return GetToken(PgnParser.QUOTED_STRING, 0); }
		public ITerminalNode[] WS() { return GetTokens(PgnParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(PgnParser.WS, i);
		}
		public WhiteTagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whiteTag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterWhiteTag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitWhiteTag(this);
		}
	}

	[RuleVersion(0)]
	public WhiteTagContext whiteTag() {
		WhiteTagContext _localctx = new WhiteTagContext(Context, State);
		EnterRule(_localctx, 42, RULE_whiteTag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298; Match(LEFT_TAG);
			State = 299; Match(WHITE);
			State = 301;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 300; Match(WS);
				}
				}
				State = 303;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==WS );
			State = 305; _localctx.bar = Match(QUOTED_STRING);
			State = 306; Match(RIGHT_TAG);
			 
				White = _localctx.bar.Text.Trim(c_doubleQuote).Replace("\"\"", "\""); 

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResultTagContext : ParserRuleContext {
		public IToken bar;
		public ITerminalNode LEFT_TAG() { return GetToken(PgnParser.LEFT_TAG, 0); }
		public ITerminalNode RESULT() { return GetToken(PgnParser.RESULT, 0); }
		public ITerminalNode RIGHT_TAG() { return GetToken(PgnParser.RIGHT_TAG, 0); }
		public ITerminalNode GAME_RESULT() { return GetToken(PgnParser.GAME_RESULT, 0); }
		public ITerminalNode[] WS() { return GetTokens(PgnParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(PgnParser.WS, i);
		}
		public ResultTagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resultTag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterResultTag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitResultTag(this);
		}
	}

	[RuleVersion(0)]
	public ResultTagContext resultTag() {
		ResultTagContext _localctx = new ResultTagContext(Context, State);
		EnterRule(_localctx, 44, RULE_resultTag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309; Match(LEFT_TAG);
			State = 310; Match(RESULT);
			State = 312;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 311; Match(WS);
				}
				}
				State = 314;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==WS );
			State = 316; _localctx.bar = Match(GAME_RESULT);
			State = 317; Match(RIGHT_TAG);

				Result = _localctx.bar.Text.Trim(c_doubleQuote);

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionalTagContext : ParserRuleContext {
		public IToken foo;
		public IToken bar;
		public ITerminalNode LEFT_TAG() { return GetToken(PgnParser.LEFT_TAG, 0); }
		public ITerminalNode RIGHT_TAG() { return GetToken(PgnParser.RIGHT_TAG, 0); }
		public ITerminalNode QUOTED_STRING() { return GetToken(PgnParser.QUOTED_STRING, 0); }
		public ITerminalNode[] WS() { return GetTokens(PgnParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(PgnParser.WS, i);
		}
		public ITerminalNode[] TAG_NAME() { return GetTokens(PgnParser.TAG_NAME); }
		public ITerminalNode TAG_NAME(int i) {
			return GetToken(PgnParser.TAG_NAME, i);
		}
		public OptionalTagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionalTag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.EnterOptionalTag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPgnListener typedListener = listener as IPgnListener;
			if (typedListener != null) typedListener.ExitOptionalTag(this);
		}
	}

	[RuleVersion(0)]
	public OptionalTagContext optionalTag() {
		OptionalTagContext _localctx = new OptionalTagContext(Context, State);
		EnterRule(_localctx, 46, RULE_optionalTag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 320; Match(LEFT_TAG);
			State = 322;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 321; _localctx.foo = Match(TAG_NAME);
				}
				}
				State = 324;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==TAG_NAME );
			State = 327;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 326; Match(WS);
				}
				}
				State = 329;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==WS );
			State = 331; _localctx.bar = Match(QUOTED_STRING);
			State = 332; Match(RIGHT_TAG);

				string trimmedText = _localctx.bar.Text.Trim(c_doubleQuote).Replace("\"\"", "\"");
			    m_optionalTags.Add(_localctx.foo.Text, trimmedText); 
				if(_localctx.foo.Text == "FEN")
				{
				    // rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1
					m_processor.DoFen(trimmedText);
				}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3%\x152\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x3\x2\x3\x2\x3\x3"+
		"\x3\x3\x5\x3\x37\n\x3\x3\x4\x3\x4\x3\x4\x3\x5\x6\x5=\n\x5\r\x5\xE\x5>"+
		"\x3\x6\x3\x6\x5\x6\x43\n\x6\x3\x6\a\x6\x46\n\x6\f\x6\xE\x6I\v\x6\x3\x6"+
		"\x3\x6\x5\x6M\n\x6\a\x6O\n\x6\f\x6\xE\x6R\v\x6\x3\a\x3\a\x6\aV\n\a\r\a"+
		"\xE\aW\x3\a\x5\a[\n\a\x3\a\a\a^\n\a\f\a\xE\a\x61\v\a\x3\a\x5\a\x64\n\a"+
		"\x3\a\a\ag\n\a\f\a\xE\aj\v\a\x3\a\x3\a\x3\b\x3\b\x5\bp\n\b\x3\t\x3\t\x6"+
		"\tt\n\t\r\t\xE\tu\x3\t\a\ty\n\t\f\t\xE\t|\v\t\x3\n\x3\n\x5\n\x80\n\n\x3"+
		"\n\x3\n\x5\n\x84\n\n\x3\n\x5\n\x87\n\n\x3\n\x6\n\x8A\n\n\r\n\xE\n\x8B"+
		"\x3\n\x5\n\x8F\n\n\x3\n\x6\n\x92\n\n\r\n\xE\n\x93\x3\n\x5\n\x97\n\n\x3"+
		"\n\x3\n\x3\v\x3\v\x6\v\x9D\n\v\r\v\xE\v\x9E\x3\v\a\v\xA2\n\v\f\v\xE\v"+
		"\xA5\v\v\x3\f\x3\f\a\f\xA9\n\f\f\f\xE\f\xAC\v\f\x3\f\x3\f\a\f\xB0\n\f"+
		"\f\f\xE\f\xB3\v\f\x5\f\xB5\n\f\x3\f\x3\f\x6\f\xB9\n\f\r\f\xE\f\xBA\x3"+
		"\f\x5\f\xBE\n\f\x3\f\a\f\xC1\n\f\f\f\xE\f\xC4\v\f\x3\f\x3\f\a\f\xC8\n"+
		"\f\f\f\xE\f\xCB\v\f\x5\f\xCD\n\f\x3\f\x5\f\xD0\n\f\x3\r\x3\r\x3\r\x3\r"+
		"\x3\r\x3\r\x3\r\x5\r\xD9\n\r\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\x10"+
		"\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\a\x11\xE8\n\x11\f\x11\xE\x11"+
		"\xEB\v\x11\x3\x11\a\x11\xEE\n\x11\f\x11\xE\x11\xF1\v\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x12\x3\x12\x3\x12\x6\x12\xF9\n\x12\r\x12\xE\x12\xFA\x3\x12"+
		"\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x6\x13\x104\n\x13\r\x13\xE"+
		"\x13\x105\x3\x13\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x6\x14\x10F"+
		"\n\x14\r\x14\xE\x14\x110\x3\x14\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3"+
		"\x15\x6\x15\x11A\n\x15\r\x15\xE\x15\x11B\x3\x15\x3\x15\x3\x15\x3\x15\x3"+
		"\x16\x3\x16\x3\x16\x6\x16\x125\n\x16\r\x16\xE\x16\x126\x3\x16\x3\x16\x3"+
		"\x16\x3\x16\x3\x17\x3\x17\x3\x17\x6\x17\x130\n\x17\r\x17\xE\x17\x131\x3"+
		"\x17\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x6\x18\x13B\n\x18\r\x18"+
		"\xE\x18\x13C\x3\x18\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19\x6\x19\x145\n\x19"+
		"\r\x19\xE\x19\x146\x3\x19\x6\x19\x14A\n\x19\r\x19\xE\x19\x14B\x3\x19\x3"+
		"\x19\x3\x19\x3\x19\x3\x19\x2\x2\x1A\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16"+
		"\x18\x1A\x1C\x1E \"$&(*,.\x30\x2\x3\x4\x2\x13\x14\x1C\x1D\x16D\x2\x32"+
		"\x3\x2\x2\x2\x4\x36\x3\x2\x2\x2\x6\x38\x3\x2\x2\x2\b<\x3\x2\x2\x2\n\x42"+
		"\x3\x2\x2\x2\fS\x3\x2\x2\x2\xEo\x3\x2\x2\x2\x10q\x3\x2\x2\x2\x12}\x3\x2"+
		"\x2\x2\x14\x9A\x3\x2\x2\x2\x16\xA6\x3\x2\x2\x2\x18\xD8\x3\x2\x2\x2\x1A"+
		"\xDA\x3\x2\x2\x2\x1C\xDD\x3\x2\x2\x2\x1E\xE0\x3\x2\x2\x2 \xE3\x3\x2\x2"+
		"\x2\"\xF5\x3\x2\x2\x2$\x100\x3\x2\x2\x2&\x10B\x3\x2\x2\x2(\x116\x3\x2"+
		"\x2\x2*\x121\x3\x2\x2\x2,\x12C\x3\x2\x2\x2.\x137\x3\x2\x2\x2\x30\x142"+
		"\x3\x2\x2\x2\x32\x33\x5\x6\x4\x2\x33\x3\x3\x2\x2\x2\x34\x37\x5\x18\r\x2"+
		"\x35\x37\x5\x30\x19\x2\x36\x34\x3\x2\x2\x2\x36\x35\x3\x2\x2\x2\x37\x5"+
		"\x3\x2\x2\x2\x38\x39\x5\b\x5\x2\x39:\a\x2\x2\x3:\a\x3\x2\x2\x2;=\x5\f"+
		"\a\x2<;\x3\x2\x2\x2=>\x3\x2\x2\x2><\x3\x2\x2\x2>?\x3\x2\x2\x2?\t\x3\x2"+
		"\x2\x2@\x43\x5\x30\x19\x2\x41\x43\x5\x18\r\x2\x42@\x3\x2\x2\x2\x42\x41"+
		"\x3\x2\x2\x2\x43P\x3\x2\x2\x2\x44\x46\a\x17\x2\x2\x45\x44\x3\x2\x2\x2"+
		"\x46I\x3\x2\x2\x2G\x45\x3\x2\x2\x2GH\x3\x2\x2\x2HL\x3\x2\x2\x2IG\x3\x2"+
		"\x2\x2JM\x5\x30\x19\x2KM\x5\x18\r\x2LJ\x3\x2\x2\x2LK\x3\x2\x2\x2MO\x3"+
		"\x2\x2\x2NG\x3\x2\x2\x2OR\x3\x2\x2\x2PN\x3\x2\x2\x2PQ\x3\x2\x2\x2Q\v\x3"+
		"\x2\x2\x2RP\x3\x2\x2\x2SU\x5\n\x6\x2TV\a\x17\x2\x2UT\x3\x2\x2\x2VW\x3"+
		"\x2\x2\x2WU\x3\x2\x2\x2WX\x3\x2\x2\x2XZ\x3\x2\x2\x2Y[\x5\x14\v\x2ZY\x3"+
		"\x2\x2\x2Z[\x3\x2\x2\x2[_\x3\x2\x2\x2\\^\a\x17\x2\x2]\\\x3\x2\x2\x2^\x61"+
		"\x3\x2\x2\x2_]\x3\x2\x2\x2_`\x3\x2\x2\x2`\x63\x3\x2\x2\x2\x61_\x3\x2\x2"+
		"\x2\x62\x64\a\x1A\x2\x2\x63\x62\x3\x2\x2\x2\x63\x64\x3\x2\x2\x2\x64h\x3"+
		"\x2\x2\x2\x65g\a\x17\x2\x2\x66\x65\x3\x2\x2\x2gj\x3\x2\x2\x2h\x66\x3\x2"+
		"\x2\x2hi\x3\x2\x2\x2ik\x3\x2\x2\x2jh\x3\x2\x2\x2kl\b\a\x1\x2l\r\x3\x2"+
		"\x2\x2mp\x5\x1A\xE\x2np\x5 \x11\x2om\x3\x2\x2\x2on\x3\x2\x2\x2p\xF\x3"+
		"\x2\x2\x2qz\x5\xE\b\x2rt\a\x17\x2\x2sr\x3\x2\x2\x2tu\x3\x2\x2\x2us\x3"+
		"\x2\x2\x2uv\x3\x2\x2\x2vw\x3\x2\x2\x2wy\x5\xE\b\x2xs\x3\x2\x2\x2y|\x3"+
		"\x2\x2\x2zx\x3\x2\x2\x2z{\x3\x2\x2\x2{\x11\x3\x2\x2\x2|z\x3\x2\x2\x2}"+
		"\x7F\t\x2\x2\x2~\x80\a\x1E\x2\x2\x7F~\x3\x2\x2\x2\x7F\x80\x3\x2\x2\x2"+
		"\x80\x83\x3\x2\x2\x2\x81\x84\a\x12\x2\x2\x82\x84\a\x11\x2\x2\x83\x81\x3"+
		"\x2\x2\x2\x83\x82\x3\x2\x2\x2\x83\x84\x3\x2\x2\x2\x84\x86\x3\x2\x2\x2"+
		"\x85\x87\a%\x2\x2\x86\x85\x3\x2\x2\x2\x86\x87\x3\x2\x2\x2\x87\x8E\x3\x2"+
		"\x2\x2\x88\x8A\a\x17\x2\x2\x89\x88\x3\x2\x2\x2\x8A\x8B\x3\x2\x2\x2\x8B"+
		"\x89\x3\x2\x2\x2\x8B\x8C\x3\x2\x2\x2\x8C\x8D\x3\x2\x2\x2\x8D\x8F\a$\x2"+
		"\x2\x8E\x89\x3\x2\x2\x2\x8E\x8F\x3\x2\x2\x2\x8F\x96\x3\x2\x2\x2\x90\x92"+
		"\a\x17\x2\x2\x91\x90\x3\x2\x2\x2\x92\x93\x3\x2\x2\x2\x93\x91\x3\x2\x2"+
		"\x2\x93\x94\x3\x2\x2\x2\x94\x95\x3\x2\x2\x2\x95\x97\x5\x10\t\x2\x96\x91"+
		"\x3\x2\x2\x2\x96\x97\x3\x2\x2\x2\x97\x98\x3\x2\x2\x2\x98\x99\b\n\x1\x2"+
		"\x99\x13\x3\x2\x2\x2\x9A\xA3\x5\x16\f\x2\x9B\x9D\a\x17\x2\x2\x9C\x9B\x3"+
		"\x2\x2\x2\x9D\x9E\x3\x2\x2\x2\x9E\x9C\x3\x2\x2\x2\x9E\x9F\x3\x2\x2\x2"+
		"\x9F\xA0\x3\x2\x2\x2\xA0\xA2\x5\x16\f\x2\xA1\x9C\x3\x2\x2\x2\xA2\xA5\x3"+
		"\x2\x2\x2\xA3\xA1\x3\x2\x2\x2\xA3\xA4\x3\x2\x2\x2\xA4\x15\x3\x2\x2\x2"+
		"\xA5\xA3\x3\x2\x2\x2\xA6\xAA\a \x2\x2\xA7\xA9\a\x17\x2\x2\xA8\xA7\x3\x2"+
		"\x2\x2\xA9\xAC\x3\x2\x2\x2\xAA\xA8\x3\x2\x2\x2\xAA\xAB\x3\x2\x2\x2\xAB"+
		"\xB4\x3\x2\x2\x2\xAC\xAA\x3\x2\x2\x2\xAD\xB1\a\"\x2\x2\xAE\xB0\a\x17\x2"+
		"\x2\xAF\xAE\x3\x2\x2\x2\xB0\xB3\x3\x2\x2\x2\xB1\xAF\x3\x2\x2\x2\xB1\xB2"+
		"\x3\x2\x2\x2\xB2\xB5\x3\x2\x2\x2\xB3\xB1\x3\x2\x2\x2\xB4\xAD\x3\x2\x2"+
		"\x2\xB4\xB5\x3\x2\x2\x2\xB5\xB6\x3\x2\x2\x2\xB6\xCF\x5\x12\n\x2\xB7\xB9"+
		"\a\x17\x2\x2\xB8\xB7\x3\x2\x2\x2\xB9\xBA\x3\x2\x2\x2\xBA\xB8\x3\x2\x2"+
		"\x2\xBA\xBB\x3\x2\x2\x2\xBB\xCC\x3\x2\x2\x2\xBC\xBE\a \x2\x2\xBD\xBC\x3"+
		"\x2\x2\x2\xBD\xBE\x3\x2\x2\x2\xBE\xC2\x3\x2\x2\x2\xBF\xC1\a\x17\x2\x2"+
		"\xC0\xBF\x3\x2\x2\x2\xC1\xC4\x3\x2\x2\x2\xC2\xC0\x3\x2\x2\x2\xC2\xC3\x3"+
		"\x2\x2\x2\xC3\xC5\x3\x2\x2\x2\xC4\xC2\x3\x2\x2\x2\xC5\xC9\a\"\x2\x2\xC6"+
		"\xC8\a\x17\x2\x2\xC7\xC6\x3\x2\x2\x2\xC8\xCB\x3\x2\x2\x2\xC9\xC7\x3\x2"+
		"\x2\x2\xC9\xCA\x3\x2\x2\x2\xCA\xCD\x3\x2\x2\x2\xCB\xC9\x3\x2\x2\x2\xCC"+
		"\xBD\x3\x2\x2\x2\xCC\xCD\x3\x2\x2\x2\xCD\xCE\x3\x2\x2\x2\xCE\xD0\x5\x12"+
		"\n\x2\xCF\xB8\x3\x2\x2\x2\xCF\xD0\x3\x2\x2\x2\xD0\x17\x3\x2\x2\x2\xD1"+
		"\xD9\x5\"\x12\x2\xD2\xD9\x5$\x13\x2\xD3\xD9\x5&\x14\x2\xD4\xD9\x5(\x15"+
		"\x2\xD5\xD9\x5*\x16\x2\xD6\xD9\x5,\x17\x2\xD7\xD9\x5.\x18\x2\xD8\xD1\x3"+
		"\x2\x2\x2\xD8\xD2\x3\x2\x2\x2\xD8\xD3\x3\x2\x2\x2\xD8\xD4\x3\x2\x2\x2"+
		"\xD8\xD5\x3\x2\x2\x2\xD8\xD6\x3\x2\x2\x2\xD8\xD7\x3\x2\x2\x2\xD9\x19\x3"+
		"\x2\x2\x2\xDA\xDB\a!\x2\x2\xDB\xDC\b\xE\x1\x2\xDC\x1B\x3\x2\x2\x2\xDD"+
		"\xDE\a\a\x2\x2\xDE\xDF\b\xF\x1\x2\xDF\x1D\x3\x2\x2\x2\xE0\xE1\a\b\x2\x2"+
		"\xE1\xE2\b\x10\x1\x2\xE2\x1F\x3\x2\x2\x2\xE3\xE9\x5\x1C\xF\x2\xE4\xE8"+
		"\x5\x14\v\x2\xE5\xE8\x5 \x11\x2\xE6\xE8\x5\x1A\xE\x2\xE7\xE4\x3\x2\x2"+
		"\x2\xE7\xE5\x3\x2\x2\x2\xE7\xE6\x3\x2\x2\x2\xE8\xEB\x3\x2\x2\x2\xE9\xE7"+
		"\x3\x2\x2\x2\xE9\xEA\x3\x2\x2\x2\xEA\xEF\x3\x2\x2\x2\xEB\xE9\x3\x2\x2"+
		"\x2\xEC\xEE\a\x17\x2\x2\xED\xEC\x3\x2\x2\x2\xEE\xF1\x3\x2\x2\x2\xEF\xED"+
		"\x3\x2\x2\x2\xEF\xF0\x3\x2\x2\x2\xF0\xF2\x3\x2\x2\x2\xF1\xEF\x3\x2\x2"+
		"\x2\xF2\xF3\x5\x1E\x10\x2\xF3\xF4\b\x11\x1\x2\xF4!\x3\x2\x2\x2\xF5\xF6"+
		"\a\x3\x2\x2\xF6\xF8\a\n\x2\x2\xF7\xF9\a\x17\x2\x2\xF8\xF7\x3\x2\x2\x2"+
		"\xF9\xFA\x3\x2\x2\x2\xFA\xF8\x3\x2\x2\x2\xFA\xFB\x3\x2\x2\x2\xFB\xFC\x3"+
		"\x2\x2\x2\xFC\xFD\a\x1B\x2\x2\xFD\xFE\a\x4\x2\x2\xFE\xFF\b\x12\x1\x2\xFF"+
		"#\x3\x2\x2\x2\x100\x101\a\x3\x2\x2\x101\x103\a\v\x2\x2\x102\x104\a\x17"+
		"\x2\x2\x103\x102\x3\x2\x2\x2\x104\x105\x3\x2\x2\x2\x105\x103\x3\x2\x2"+
		"\x2\x105\x106\x3\x2\x2\x2\x106\x107\x3\x2\x2\x2\x107\x108\a\x1B\x2\x2"+
		"\x108\x109\a\x4\x2\x2\x109\x10A\b\x13\x1\x2\x10A%\x3\x2\x2\x2\x10B\x10C"+
		"\a\x3\x2\x2\x10C\x10E\a\f\x2\x2\x10D\x10F\a\x17\x2\x2\x10E\x10D\x3\x2"+
		"\x2\x2\x10F\x110\x3\x2\x2\x2\x110\x10E\x3\x2\x2\x2\x110\x111\x3\x2\x2"+
		"\x2\x111\x112\x3\x2\x2\x2\x112\x113\a\x1B\x2\x2\x113\x114\a\x4\x2\x2\x114"+
		"\x115\b\x14\x1\x2\x115\'\x3\x2\x2\x2\x116\x117\a\x3\x2\x2\x117\x119\a"+
		"\r\x2\x2\x118\x11A\a\x17\x2\x2\x119\x118\x3\x2\x2\x2\x11A\x11B\x3\x2\x2"+
		"\x2\x11B\x119\x3\x2\x2\x2\x11B\x11C\x3\x2\x2\x2\x11C\x11D\x3\x2\x2\x2"+
		"\x11D\x11E\a\x1B\x2\x2\x11E\x11F\a\x4\x2\x2\x11F\x120\b\x15\x1\x2\x120"+
		")\x3\x2\x2\x2\x121\x122\a\x3\x2\x2\x122\x124\a\xF\x2\x2\x123\x125\a\x17"+
		"\x2\x2\x124\x123\x3\x2\x2\x2\x125\x126\x3\x2\x2\x2\x126\x124\x3\x2\x2"+
		"\x2\x126\x127\x3\x2\x2\x2\x127\x128\x3\x2\x2\x2\x128\x129\a\x1B\x2\x2"+
		"\x129\x12A\a\x4\x2\x2\x12A\x12B\b\x16\x1\x2\x12B+\x3\x2\x2\x2\x12C\x12D"+
		"\a\x3\x2\x2\x12D\x12F\a\xE\x2\x2\x12E\x130\a\x17\x2\x2\x12F\x12E\x3\x2"+
		"\x2\x2\x130\x131\x3\x2\x2\x2\x131\x12F\x3\x2\x2\x2\x131\x132\x3\x2\x2"+
		"\x2\x132\x133\x3\x2\x2\x2\x133\x134\a\x1B\x2\x2\x134\x135\a\x4\x2\x2\x135"+
		"\x136\b\x17\x1\x2\x136-\x3\x2\x2\x2\x137\x138\a\x3\x2\x2\x138\x13A\a\x10"+
		"\x2\x2\x139\x13B\a\x17\x2\x2\x13A\x139\x3\x2\x2\x2\x13B\x13C\x3\x2\x2"+
		"\x2\x13C\x13A\x3\x2\x2\x2\x13C\x13D\x3\x2\x2\x2\x13D\x13E\x3\x2\x2\x2"+
		"\x13E\x13F\a\x19\x2\x2\x13F\x140\a\x4\x2\x2\x140\x141\b\x18\x1\x2\x141"+
		"/\x3\x2\x2\x2\x142\x144\a\x3\x2\x2\x143\x145\a#\x2\x2\x144\x143\x3\x2"+
		"\x2\x2\x145\x146\x3\x2\x2\x2\x146\x144\x3\x2\x2\x2\x146\x147\x3\x2\x2"+
		"\x2\x147\x149\x3\x2\x2\x2\x148\x14A\a\x17\x2\x2\x149\x148\x3\x2\x2\x2"+
		"\x14A\x14B\x3\x2\x2\x2\x14B\x149\x3\x2\x2\x2\x14B\x14C\x3\x2\x2\x2\x14C"+
		"\x14D\x3\x2\x2\x2\x14D\x14E\a\x1B\x2\x2\x14E\x14F\a\x4\x2\x2\x14F\x150"+
		"\b\x19\x1\x2\x150\x31\x3\x2\x2\x2/\x36>\x42GLPWZ_\x63houz\x7F\x83\x86"+
		"\x8B\x8E\x93\x96\x9E\xA3\xAA\xB1\xB4\xBA\xBD\xC2\xC9\xCC\xCF\xD8\xE7\xE9"+
		"\xEF\xFA\x105\x110\x11B\x126\x131\x13C\x146\x14B";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
