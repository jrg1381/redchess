//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.1 H:\\Work\\redchess\\PgnParser\\Pgn.g 2015-03-02 16:54:12

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace  Redchess.Pgn 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.1")]
[System.CLSCompliant(false)]
public partial class PgnLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int BLACK=4;
	public const int BLOCK_COMMENT=5;
	public const int CAPTURE=6;
	public const int CASTLE_KINGSIDE=7;
	public const int CASTLE_QUEENSIDE=8;
	public const int CHECK=9;
	public const int COLUMN=10;
	public const int DATE=11;
	public const int EVENT=12;
	public const int GAME_RESULT=13;
	public const int GAME_RESULT_END_OF_MOVETEXT=14;
	public const int INTEGER=15;
	public const int LEFT_BRACKET=16;
	public const int LEFT_CURLY_BRACKET=17;
	public const int LEFT_TAG=18;
	public const int LINE_COMMENT=19;
	public const int MATE=20;
	public const int MOVE_ANALYSIS=21;
	public const int MOVE_LABEL=22;
	public const int NO_MOVE=23;
	public const int NUMERIC_ANNOTATION_GLYPH=24;
	public const int PIECE_SYMBOL=25;
	public const int PIECE_TO_SQUARE=26;
	public const int PROMOTES_TO=27;
	public const int PROMOTES_TO_PIECE=28;
	public const int QUOTE=29;
	public const int QUOTED_STRING=30;
	public const int RESULT=31;
	public const int RIGHT_BRACKET=32;
	public const int RIGHT_CURLY_BRACKET=33;
	public const int RIGHT_TAG=34;
	public const int ROUND=35;
	public const int ROW=36;
	public const int SITE=37;
	public const int SQUARE=38;
	public const int TAG_NAME=39;
	public const int TAKES=40;
	public const int UNAMBIGUOUS_PIECE_WITH_COLUMN=41;
	public const int UNAMBIGUOUS_PIECE_WITH_ROW=42;
	public const int UNAMBIGUOUS_PIECE_WITH_ROW_AND_COLUMN=43;
	public const int WHITE=44;
	public const int WS=45;

	// delegates
	// delegators

	public PgnLexer()
	{
		OnCreated();
	}

	public PgnLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public PgnLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "H:\\Work\\redchess\\PgnParser\\Pgn.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_BLACK();
	partial void LeaveRule_BLACK();

	// $ANTLR start "BLACK"
	[GrammarRule("BLACK")]
	private void mBLACK()
	{
		EnterRule_BLACK();
		EnterRule("BLACK", 1);
		TraceIn("BLACK", 1);
		try
		{
			int _type = BLACK;
			int _channel = DefaultTokenChannel;
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:9:7: ( 'Black' )
			DebugEnterAlt(1);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:9:9: 'Black'
			{
			DebugLocation(9, 9);
			Match("Black"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BLACK", 1);
			LeaveRule("BLACK", 1);
			LeaveRule_BLACK();
		}
	}
	// $ANTLR end "BLACK"

	partial void EnterRule_CASTLE_KINGSIDE();
	partial void LeaveRule_CASTLE_KINGSIDE();

	// $ANTLR start "CASTLE_KINGSIDE"
	[GrammarRule("CASTLE_KINGSIDE")]
	private void mCASTLE_KINGSIDE()
	{
		EnterRule_CASTLE_KINGSIDE();
		EnterRule("CASTLE_KINGSIDE", 2);
		TraceIn("CASTLE_KINGSIDE", 2);
		try
		{
			int _type = CASTLE_KINGSIDE;
			int _channel = DefaultTokenChannel;
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:10:17: ( 'O-O' )
			DebugEnterAlt(1);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:10:19: 'O-O'
			{
			DebugLocation(10, 19);
			Match("O-O"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CASTLE_KINGSIDE", 2);
			LeaveRule("CASTLE_KINGSIDE", 2);
			LeaveRule_CASTLE_KINGSIDE();
		}
	}
	// $ANTLR end "CASTLE_KINGSIDE"

	partial void EnterRule_CASTLE_QUEENSIDE();
	partial void LeaveRule_CASTLE_QUEENSIDE();

	// $ANTLR start "CASTLE_QUEENSIDE"
	[GrammarRule("CASTLE_QUEENSIDE")]
	private void mCASTLE_QUEENSIDE()
	{
		EnterRule_CASTLE_QUEENSIDE();
		EnterRule("CASTLE_QUEENSIDE", 3);
		TraceIn("CASTLE_QUEENSIDE", 3);
		try
		{
			int _type = CASTLE_QUEENSIDE;
			int _channel = DefaultTokenChannel;
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:11:18: ( 'O-O-O' )
			DebugEnterAlt(1);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:11:20: 'O-O-O'
			{
			DebugLocation(11, 20);
			Match("O-O-O"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CASTLE_QUEENSIDE", 3);
			LeaveRule("CASTLE_QUEENSIDE", 3);
			LeaveRule_CASTLE_QUEENSIDE();
		}
	}
	// $ANTLR end "CASTLE_QUEENSIDE"

	partial void EnterRule_CHECK();
	partial void LeaveRule_CHECK();

	// $ANTLR start "CHECK"
	[GrammarRule("CHECK")]
	private void mCHECK()
	{
		EnterRule_CHECK();
		EnterRule("CHECK", 4);
		TraceIn("CHECK", 4);
		try
		{
			int _type = CHECK;
			int _channel = DefaultTokenChannel;
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:12:7: ( '+' )
			DebugEnterAlt(1);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:12:9: '+'
			{
			DebugLocation(12, 9);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CHECK", 4);
			LeaveRule("CHECK", 4);
			LeaveRule_CHECK();
		}
	}
	// $ANTLR end "CHECK"

	partial void EnterRule_DATE();
	partial void LeaveRule_DATE();

	// $ANTLR start "DATE"
	[GrammarRule("DATE")]
	private void mDATE()
	{
		EnterRule_DATE();
		EnterRule("DATE", 5);
		TraceIn("DATE", 5);
		try
		{
			int _type = DATE;
			int _channel = DefaultTokenChannel;
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:13:6: ( 'Date' )
			DebugEnterAlt(1);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:13:8: 'Date'
			{
			DebugLocation(13, 8);
			Match("Date"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DATE", 5);
			LeaveRule("DATE", 5);
			LeaveRule_DATE();
		}
	}
	// $ANTLR end "DATE"

	partial void EnterRule_EVENT();
	partial void LeaveRule_EVENT();

	// $ANTLR start "EVENT"
	[GrammarRule("EVENT")]
	private void mEVENT()
	{
		EnterRule_EVENT();
		EnterRule("EVENT", 6);
		TraceIn("EVENT", 6);
		try
		{
			int _type = EVENT;
			int _channel = DefaultTokenChannel;
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:14:7: ( 'Event' )
			DebugEnterAlt(1);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:14:9: 'Event'
			{
			DebugLocation(14, 9);
			Match("Event"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EVENT", 6);
			LeaveRule("EVENT", 6);
			LeaveRule_EVENT();
		}
	}
	// $ANTLR end "EVENT"

	partial void EnterRule_LEFT_BRACKET();
	partial void LeaveRule_LEFT_BRACKET();

	// $ANTLR start "LEFT_BRACKET"
	[GrammarRule("LEFT_BRACKET")]
	private void mLEFT_BRACKET()
	{
		EnterRule_LEFT_BRACKET();
		EnterRule("LEFT_BRACKET", 7);
		TraceIn("LEFT_BRACKET", 7);
		try
		{
			int _type = LEFT_BRACKET;
			int _channel = DefaultTokenChannel;
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:15:14: ( '(' )
			DebugEnterAlt(1);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:15:16: '('
			{
			DebugLocation(15, 16);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LEFT_BRACKET", 7);
			LeaveRule("LEFT_BRACKET", 7);
			LeaveRule_LEFT_BRACKET();
		}
	}
	// $ANTLR end "LEFT_BRACKET"

	partial void EnterRule_LEFT_CURLY_BRACKET();
	partial void LeaveRule_LEFT_CURLY_BRACKET();

	// $ANTLR start "LEFT_CURLY_BRACKET"
	[GrammarRule("LEFT_CURLY_BRACKET")]
	private void mLEFT_CURLY_BRACKET()
	{
		EnterRule_LEFT_CURLY_BRACKET();
		EnterRule("LEFT_CURLY_BRACKET", 8);
		TraceIn("LEFT_CURLY_BRACKET", 8);
		try
		{
			int _type = LEFT_CURLY_BRACKET;
			int _channel = DefaultTokenChannel;
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:16:20: ( '{' )
			DebugEnterAlt(1);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:16:22: '{'
			{
			DebugLocation(16, 22);
			Match('{'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LEFT_CURLY_BRACKET", 8);
			LeaveRule("LEFT_CURLY_BRACKET", 8);
			LeaveRule_LEFT_CURLY_BRACKET();
		}
	}
	// $ANTLR end "LEFT_CURLY_BRACKET"

	partial void EnterRule_LEFT_TAG();
	partial void LeaveRule_LEFT_TAG();

	// $ANTLR start "LEFT_TAG"
	[GrammarRule("LEFT_TAG")]
	private void mLEFT_TAG()
	{
		EnterRule_LEFT_TAG();
		EnterRule("LEFT_TAG", 9);
		TraceIn("LEFT_TAG", 9);
		try
		{
			int _type = LEFT_TAG;
			int _channel = DefaultTokenChannel;
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:17:10: ( '[' )
			DebugEnterAlt(1);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:17:12: '['
			{
			DebugLocation(17, 12);
			Match('['); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LEFT_TAG", 9);
			LeaveRule("LEFT_TAG", 9);
			LeaveRule_LEFT_TAG();
		}
	}
	// $ANTLR end "LEFT_TAG"

	partial void EnterRule_MATE();
	partial void LeaveRule_MATE();

	// $ANTLR start "MATE"
	[GrammarRule("MATE")]
	private void mMATE()
	{
		EnterRule_MATE();
		EnterRule("MATE", 10);
		TraceIn("MATE", 10);
		try
		{
			int _type = MATE;
			int _channel = DefaultTokenChannel;
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:18:6: ( '#' )
			DebugEnterAlt(1);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:18:8: '#'
			{
			DebugLocation(18, 8);
			Match('#'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MATE", 10);
			LeaveRule("MATE", 10);
			LeaveRule_MATE();
		}
	}
	// $ANTLR end "MATE"

	partial void EnterRule_PROMOTES_TO();
	partial void LeaveRule_PROMOTES_TO();

	// $ANTLR start "PROMOTES_TO"
	[GrammarRule("PROMOTES_TO")]
	private void mPROMOTES_TO()
	{
		EnterRule_PROMOTES_TO();
		EnterRule("PROMOTES_TO", 11);
		TraceIn("PROMOTES_TO", 11);
		try
		{
			int _type = PROMOTES_TO;
			int _channel = DefaultTokenChannel;
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:19:13: ( '=' )
			DebugEnterAlt(1);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:19:15: '='
			{
			DebugLocation(19, 15);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PROMOTES_TO", 11);
			LeaveRule("PROMOTES_TO", 11);
			LeaveRule_PROMOTES_TO();
		}
	}
	// $ANTLR end "PROMOTES_TO"

	partial void EnterRule_QUOTE();
	partial void LeaveRule_QUOTE();

	// $ANTLR start "QUOTE"
	[GrammarRule("QUOTE")]
	private void mQUOTE()
	{
		EnterRule_QUOTE();
		EnterRule("QUOTE", 12);
		TraceIn("QUOTE", 12);
		try
		{
			int _type = QUOTE;
			int _channel = DefaultTokenChannel;
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:20:7: ( '\"' )
			DebugEnterAlt(1);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:20:9: '\"'
			{
			DebugLocation(20, 9);
			Match('\"'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("QUOTE", 12);
			LeaveRule("QUOTE", 12);
			LeaveRule_QUOTE();
		}
	}
	// $ANTLR end "QUOTE"

	partial void EnterRule_RESULT();
	partial void LeaveRule_RESULT();

	// $ANTLR start "RESULT"
	[GrammarRule("RESULT")]
	private void mRESULT()
	{
		EnterRule_RESULT();
		EnterRule("RESULT", 13);
		TraceIn("RESULT", 13);
		try
		{
			int _type = RESULT;
			int _channel = DefaultTokenChannel;
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:21:8: ( 'Result' )
			DebugEnterAlt(1);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:21:10: 'Result'
			{
			DebugLocation(21, 10);
			Match("Result"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RESULT", 13);
			LeaveRule("RESULT", 13);
			LeaveRule_RESULT();
		}
	}
	// $ANTLR end "RESULT"

	partial void EnterRule_RIGHT_BRACKET();
	partial void LeaveRule_RIGHT_BRACKET();

	// $ANTLR start "RIGHT_BRACKET"
	[GrammarRule("RIGHT_BRACKET")]
	private void mRIGHT_BRACKET()
	{
		EnterRule_RIGHT_BRACKET();
		EnterRule("RIGHT_BRACKET", 14);
		TraceIn("RIGHT_BRACKET", 14);
		try
		{
			int _type = RIGHT_BRACKET;
			int _channel = DefaultTokenChannel;
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:22:15: ( ')' )
			DebugEnterAlt(1);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:22:17: ')'
			{
			DebugLocation(22, 17);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RIGHT_BRACKET", 14);
			LeaveRule("RIGHT_BRACKET", 14);
			LeaveRule_RIGHT_BRACKET();
		}
	}
	// $ANTLR end "RIGHT_BRACKET"

	partial void EnterRule_RIGHT_CURLY_BRACKET();
	partial void LeaveRule_RIGHT_CURLY_BRACKET();

	// $ANTLR start "RIGHT_CURLY_BRACKET"
	[GrammarRule("RIGHT_CURLY_BRACKET")]
	private void mRIGHT_CURLY_BRACKET()
	{
		EnterRule_RIGHT_CURLY_BRACKET();
		EnterRule("RIGHT_CURLY_BRACKET", 15);
		TraceIn("RIGHT_CURLY_BRACKET", 15);
		try
		{
			int _type = RIGHT_CURLY_BRACKET;
			int _channel = DefaultTokenChannel;
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:23:21: ( '}' )
			DebugEnterAlt(1);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:23:23: '}'
			{
			DebugLocation(23, 23);
			Match('}'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RIGHT_CURLY_BRACKET", 15);
			LeaveRule("RIGHT_CURLY_BRACKET", 15);
			LeaveRule_RIGHT_CURLY_BRACKET();
		}
	}
	// $ANTLR end "RIGHT_CURLY_BRACKET"

	partial void EnterRule_RIGHT_TAG();
	partial void LeaveRule_RIGHT_TAG();

	// $ANTLR start "RIGHT_TAG"
	[GrammarRule("RIGHT_TAG")]
	private void mRIGHT_TAG()
	{
		EnterRule_RIGHT_TAG();
		EnterRule("RIGHT_TAG", 16);
		TraceIn("RIGHT_TAG", 16);
		try
		{
			int _type = RIGHT_TAG;
			int _channel = DefaultTokenChannel;
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:24:11: ( ']' )
			DebugEnterAlt(1);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:24:13: ']'
			{
			DebugLocation(24, 13);
			Match(']'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RIGHT_TAG", 16);
			LeaveRule("RIGHT_TAG", 16);
			LeaveRule_RIGHT_TAG();
		}
	}
	// $ANTLR end "RIGHT_TAG"

	partial void EnterRule_ROUND();
	partial void LeaveRule_ROUND();

	// $ANTLR start "ROUND"
	[GrammarRule("ROUND")]
	private void mROUND()
	{
		EnterRule_ROUND();
		EnterRule("ROUND", 17);
		TraceIn("ROUND", 17);
		try
		{
			int _type = ROUND;
			int _channel = DefaultTokenChannel;
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:25:7: ( 'Round' )
			DebugEnterAlt(1);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:25:9: 'Round'
			{
			DebugLocation(25, 9);
			Match("Round"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ROUND", 17);
			LeaveRule("ROUND", 17);
			LeaveRule_ROUND();
		}
	}
	// $ANTLR end "ROUND"

	partial void EnterRule_SITE();
	partial void LeaveRule_SITE();

	// $ANTLR start "SITE"
	[GrammarRule("SITE")]
	private void mSITE()
	{
		EnterRule_SITE();
		EnterRule("SITE", 18);
		TraceIn("SITE", 18);
		try
		{
			int _type = SITE;
			int _channel = DefaultTokenChannel;
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:26:6: ( 'Site' )
			DebugEnterAlt(1);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:26:8: 'Site'
			{
			DebugLocation(26, 8);
			Match("Site"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SITE", 18);
			LeaveRule("SITE", 18);
			LeaveRule_SITE();
		}
	}
	// $ANTLR end "SITE"

	partial void EnterRule_TAKES();
	partial void LeaveRule_TAKES();

	// $ANTLR start "TAKES"
	[GrammarRule("TAKES")]
	private void mTAKES()
	{
		EnterRule_TAKES();
		EnterRule("TAKES", 19);
		TraceIn("TAKES", 19);
		try
		{
			int _type = TAKES;
			int _channel = DefaultTokenChannel;
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:27:7: ( 'x' )
			DebugEnterAlt(1);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:27:9: 'x'
			{
			DebugLocation(27, 9);
			Match('x'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TAKES", 19);
			LeaveRule("TAKES", 19);
			LeaveRule_TAKES();
		}
	}
	// $ANTLR end "TAKES"

	partial void EnterRule_WHITE();
	partial void LeaveRule_WHITE();

	// $ANTLR start "WHITE"
	[GrammarRule("WHITE")]
	private void mWHITE()
	{
		EnterRule_WHITE();
		EnterRule("WHITE", 20);
		TraceIn("WHITE", 20);
		try
		{
			int _type = WHITE;
			int _channel = DefaultTokenChannel;
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:28:7: ( 'White' )
			DebugEnterAlt(1);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:28:9: 'White'
			{
			DebugLocation(28, 9);
			Match("White"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WHITE", 20);
			LeaveRule("WHITE", 20);
			LeaveRule_WHITE();
		}
	}
	// $ANTLR end "WHITE"

	partial void EnterRule_COLUMN();
	partial void LeaveRule_COLUMN();

	// $ANTLR start "COLUMN"
	[GrammarRule("COLUMN")]
	private void mCOLUMN()
	{
		EnterRule_COLUMN();
		EnterRule("COLUMN", 21);
		TraceIn("COLUMN", 21);
		try
		{
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:58:17: ( 'a' .. 'h' )
			DebugEnterAlt(1);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:
			{
			DebugLocation(58, 17);
			if ((input.LA(1)>='a' && input.LA(1)<='h'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("COLUMN", 21);
			LeaveRule("COLUMN", 21);
			LeaveRule_COLUMN();
		}
	}
	// $ANTLR end "COLUMN"

	partial void EnterRule_ROW();
	partial void LeaveRule_ROW();

	// $ANTLR start "ROW"
	[GrammarRule("ROW")]
	private void mROW()
	{
		EnterRule_ROW();
		EnterRule("ROW", 22);
		TraceIn("ROW", 22);
		try
		{
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:59:14: ( '1' .. '8' )
			DebugEnterAlt(1);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:
			{
			DebugLocation(59, 14);
			if ((input.LA(1)>='1' && input.LA(1)<='8'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("ROW", 22);
			LeaveRule("ROW", 22);
			LeaveRule_ROW();
		}
	}
	// $ANTLR end "ROW"

	partial void EnterRule_SQUARE();
	partial void LeaveRule_SQUARE();

	// $ANTLR start "SQUARE"
	[GrammarRule("SQUARE")]
	private void mSQUARE()
	{
		EnterRule_SQUARE();
		EnterRule("SQUARE", 23);
		TraceIn("SQUARE", 23);
		try
		{
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:60:17: ( COLUMN ROW )
			DebugEnterAlt(1);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:60:19: COLUMN ROW
			{
			DebugLocation(60, 19);
			mCOLUMN(); 
			DebugLocation(60, 26);
			mROW(); 

			}

		}
		finally
		{
			TraceOut("SQUARE", 23);
			LeaveRule("SQUARE", 23);
			LeaveRule_SQUARE();
		}
	}
	// $ANTLR end "SQUARE"

	partial void EnterRule_PIECE_SYMBOL();
	partial void LeaveRule_PIECE_SYMBOL();

	// $ANTLR start "PIECE_SYMBOL"
	[GrammarRule("PIECE_SYMBOL")]
	private void mPIECE_SYMBOL()
	{
		EnterRule_PIECE_SYMBOL();
		EnterRule("PIECE_SYMBOL", 24);
		TraceIn("PIECE_SYMBOL", 24);
		try
		{
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:61:23: ( 'K' | 'Q' | 'N' | 'P' | 'R' | 'B' )
			DebugEnterAlt(1);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:
			{
			DebugLocation(61, 23);
			if (input.LA(1)=='B'||input.LA(1)=='K'||input.LA(1)=='N'||(input.LA(1)>='P' && input.LA(1)<='R'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("PIECE_SYMBOL", 24);
			LeaveRule("PIECE_SYMBOL", 24);
			LeaveRule_PIECE_SYMBOL();
		}
	}
	// $ANTLR end "PIECE_SYMBOL"

	partial void EnterRule_UNAMBIGUOUS_PIECE_WITH_COLUMN();
	partial void LeaveRule_UNAMBIGUOUS_PIECE_WITH_COLUMN();

	// $ANTLR start "UNAMBIGUOUS_PIECE_WITH_COLUMN"
	[GrammarRule("UNAMBIGUOUS_PIECE_WITH_COLUMN")]
	private void mUNAMBIGUOUS_PIECE_WITH_COLUMN()
	{
		EnterRule_UNAMBIGUOUS_PIECE_WITH_COLUMN();
		EnterRule("UNAMBIGUOUS_PIECE_WITH_COLUMN", 25);
		TraceIn("UNAMBIGUOUS_PIECE_WITH_COLUMN", 25);
		try
		{
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:62:40: ( PIECE_SYMBOL COLUMN )
			DebugEnterAlt(1);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:62:42: PIECE_SYMBOL COLUMN
			{
			DebugLocation(62, 42);
			mPIECE_SYMBOL(); 
			DebugLocation(62, 55);
			mCOLUMN(); 

			}

		}
		finally
		{
			TraceOut("UNAMBIGUOUS_PIECE_WITH_COLUMN", 25);
			LeaveRule("UNAMBIGUOUS_PIECE_WITH_COLUMN", 25);
			LeaveRule_UNAMBIGUOUS_PIECE_WITH_COLUMN();
		}
	}
	// $ANTLR end "UNAMBIGUOUS_PIECE_WITH_COLUMN"

	partial void EnterRule_UNAMBIGUOUS_PIECE_WITH_ROW();
	partial void LeaveRule_UNAMBIGUOUS_PIECE_WITH_ROW();

	// $ANTLR start "UNAMBIGUOUS_PIECE_WITH_ROW"
	[GrammarRule("UNAMBIGUOUS_PIECE_WITH_ROW")]
	private void mUNAMBIGUOUS_PIECE_WITH_ROW()
	{
		EnterRule_UNAMBIGUOUS_PIECE_WITH_ROW();
		EnterRule("UNAMBIGUOUS_PIECE_WITH_ROW", 26);
		TraceIn("UNAMBIGUOUS_PIECE_WITH_ROW", 26);
		try
		{
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:63:37: ( PIECE_SYMBOL ROW )
			DebugEnterAlt(1);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:63:39: PIECE_SYMBOL ROW
			{
			DebugLocation(63, 39);
			mPIECE_SYMBOL(); 
			DebugLocation(63, 52);
			mROW(); 

			}

		}
		finally
		{
			TraceOut("UNAMBIGUOUS_PIECE_WITH_ROW", 26);
			LeaveRule("UNAMBIGUOUS_PIECE_WITH_ROW", 26);
			LeaveRule_UNAMBIGUOUS_PIECE_WITH_ROW();
		}
	}
	// $ANTLR end "UNAMBIGUOUS_PIECE_WITH_ROW"

	partial void EnterRule_UNAMBIGUOUS_PIECE_WITH_ROW_AND_COLUMN();
	partial void LeaveRule_UNAMBIGUOUS_PIECE_WITH_ROW_AND_COLUMN();

	// $ANTLR start "UNAMBIGUOUS_PIECE_WITH_ROW_AND_COLUMN"
	[GrammarRule("UNAMBIGUOUS_PIECE_WITH_ROW_AND_COLUMN")]
	private void mUNAMBIGUOUS_PIECE_WITH_ROW_AND_COLUMN()
	{
		EnterRule_UNAMBIGUOUS_PIECE_WITH_ROW_AND_COLUMN();
		EnterRule("UNAMBIGUOUS_PIECE_WITH_ROW_AND_COLUMN", 27);
		TraceIn("UNAMBIGUOUS_PIECE_WITH_ROW_AND_COLUMN", 27);
		try
		{
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:64:48: ( PIECE_SYMBOL SQUARE )
			DebugEnterAlt(1);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:64:50: PIECE_SYMBOL SQUARE
			{
			DebugLocation(64, 50);
			mPIECE_SYMBOL(); 
			DebugLocation(64, 63);
			mSQUARE(); 

			}

		}
		finally
		{
			TraceOut("UNAMBIGUOUS_PIECE_WITH_ROW_AND_COLUMN", 27);
			LeaveRule("UNAMBIGUOUS_PIECE_WITH_ROW_AND_COLUMN", 27);
			LeaveRule_UNAMBIGUOUS_PIECE_WITH_ROW_AND_COLUMN();
		}
	}
	// $ANTLR end "UNAMBIGUOUS_PIECE_WITH_ROW_AND_COLUMN"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 28);
		TraceIn("WS", 28);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:67:4: ( ( ' ' | ( '\\r\\n' | '\\n' ) | '\\t' ) )
			DebugEnterAlt(1);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:67:6: ( ' ' | ( '\\r\\n' | '\\n' ) | '\\t' )
			{
			DebugLocation(67, 6);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:67:6: ( ' ' | ( '\\r\\n' | '\\n' ) | '\\t' )
			int alt2=3;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, false);
			switch (input.LA(1))
			{
			case ' ':
				{
				alt2 = 1;
				}
				break;
			case '\n':
			case '\r':
				{
				alt2 = 2;
				}
				break;
			case '\t':
				{
				alt2 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 2, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// H:\\Work\\redchess\\PgnParser\\Pgn.g:67:8: ' '
				{
				DebugLocation(67, 8);
				Match(' '); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// H:\\Work\\redchess\\PgnParser\\Pgn.g:67:14: ( '\\r\\n' | '\\n' )
				{
				DebugLocation(67, 14);
				// H:\\Work\\redchess\\PgnParser\\Pgn.g:67:14: ( '\\r\\n' | '\\n' )
				int alt1=2;
				try { DebugEnterSubRule(1);
				try { DebugEnterDecision(1, false);
				int LA1_1 = input.LA(1);

				if ((LA1_1=='\r'))
				{
					alt1 = 1;
				}
				else if ((LA1_1=='\n'))
				{
					alt1 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 1, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// H:\\Work\\redchess\\PgnParser\\Pgn.g:67:16: '\\r\\n'
					{
					DebugLocation(67, 16);
					Match("\r\n"); 


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// H:\\Work\\redchess\\PgnParser\\Pgn.g:67:25: '\\n'
					{
					DebugLocation(67, 25);
					Match('\n'); 

					}
					break;

				}
				} finally { DebugExitSubRule(1); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// H:\\Work\\redchess\\PgnParser\\Pgn.g:67:34: '\\t'
				{
				DebugLocation(67, 34);
				Match('\t'); 

				}
				break;

			}
			} finally { DebugExitSubRule(2); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 28);
			LeaveRule("WS", 28);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	partial void EnterRule_LINE_COMMENT();
	partial void LeaveRule_LINE_COMMENT();

	// $ANTLR start "LINE_COMMENT"
	[GrammarRule("LINE_COMMENT")]
	private void mLINE_COMMENT()
	{
		EnterRule_LINE_COMMENT();
		EnterRule("LINE_COMMENT", 29);
		TraceIn("LINE_COMMENT", 29);
		try
		{
			int _type = LINE_COMMENT;
			int _channel = DefaultTokenChannel;
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:70:14: ( ( ';' . '\\r\\n' ) )
			DebugEnterAlt(1);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:70:16: ( ';' . '\\r\\n' )
			{
			DebugLocation(70, 16);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:70:16: ( ';' . '\\r\\n' )
			DebugEnterAlt(1);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:70:17: ';' . '\\r\\n'
			{
			DebugLocation(70, 17);
			Match(';'); 
			DebugLocation(70, 21);
			MatchAny(); 
			DebugLocation(70, 23);
			Match("\r\n"); 


			}

			DebugLocation(70, 31);
			 _channel = Hidden; 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LINE_COMMENT", 29);
			LeaveRule("LINE_COMMENT", 29);
			LeaveRule_LINE_COMMENT();
		}
	}
	// $ANTLR end "LINE_COMMENT"

	partial void EnterRule_GAME_RESULT();
	partial void LeaveRule_GAME_RESULT();

	// $ANTLR start "GAME_RESULT"
	[GrammarRule("GAME_RESULT")]
	private void mGAME_RESULT()
	{
		EnterRule_GAME_RESULT();
		EnterRule("GAME_RESULT", 30);
		TraceIn("GAME_RESULT", 30);
		try
		{
			int _type = GAME_RESULT;
			int _channel = DefaultTokenChannel;
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:73:13: ( '\"0-1\"' | '\"1-0\"' | '\"1/2-1/2\"' | '\"*\"' )
			int alt3=4;
			try { DebugEnterDecision(3, false);
			int LA3_1 = input.LA(1);

			if ((LA3_1=='\"'))
			{
				switch (input.LA(2))
				{
				case '0':
					{
					alt3 = 1;
					}
					break;
				case '1':
					{
					int LA3_3 = input.LA(3);

					if ((LA3_3=='-'))
					{
						alt3 = 2;
					}
					else if ((LA3_3=='/'))
					{
						alt3 = 3;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 3, 3, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case '*':
					{
					alt3 = 4;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 3, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 3, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// H:\\Work\\redchess\\PgnParser\\Pgn.g:73:15: '\"0-1\"'
				{
				DebugLocation(73, 15);
				Match("\"0-1\""); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// H:\\Work\\redchess\\PgnParser\\Pgn.g:73:25: '\"1-0\"'
				{
				DebugLocation(73, 25);
				Match("\"1-0\""); 


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// H:\\Work\\redchess\\PgnParser\\Pgn.g:73:35: '\"1/2-1/2\"'
				{
				DebugLocation(73, 35);
				Match("\"1/2-1/2\""); 


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// H:\\Work\\redchess\\PgnParser\\Pgn.g:73:49: '\"*\"'
				{
				DebugLocation(73, 49);
				Match("\"*\""); 


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GAME_RESULT", 30);
			LeaveRule("GAME_RESULT", 30);
			LeaveRule_GAME_RESULT();
		}
	}
	// $ANTLR end "GAME_RESULT"

	partial void EnterRule_GAME_RESULT_END_OF_MOVETEXT();
	partial void LeaveRule_GAME_RESULT_END_OF_MOVETEXT();

	// $ANTLR start "GAME_RESULT_END_OF_MOVETEXT"
	[GrammarRule("GAME_RESULT_END_OF_MOVETEXT")]
	private void mGAME_RESULT_END_OF_MOVETEXT()
	{
		EnterRule_GAME_RESULT_END_OF_MOVETEXT();
		EnterRule("GAME_RESULT_END_OF_MOVETEXT", 31);
		TraceIn("GAME_RESULT_END_OF_MOVETEXT", 31);
		try
		{
			int _type = GAME_RESULT_END_OF_MOVETEXT;
			int _channel = DefaultTokenChannel;
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:75:29: ( '0-1' | '1-0' | '1/2-1/2' | '*' )
			int alt4=4;
			try { DebugEnterDecision(4, false);
			switch (input.LA(1))
			{
			case '0':
				{
				alt4 = 1;
				}
				break;
			case '1':
				{
				int LA4_2 = input.LA(2);

				if ((LA4_2=='-'))
				{
					alt4 = 2;
				}
				else if ((LA4_2=='/'))
				{
					alt4 = 3;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 4, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case '*':
				{
				alt4 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 4, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// H:\\Work\\redchess\\PgnParser\\Pgn.g:75:31: '0-1'
				{
				DebugLocation(75, 31);
				Match("0-1"); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// H:\\Work\\redchess\\PgnParser\\Pgn.g:75:39: '1-0'
				{
				DebugLocation(75, 39);
				Match("1-0"); 


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// H:\\Work\\redchess\\PgnParser\\Pgn.g:75:47: '1/2-1/2'
				{
				DebugLocation(75, 47);
				Match("1/2-1/2"); 


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// H:\\Work\\redchess\\PgnParser\\Pgn.g:75:59: '*'
				{
				DebugLocation(75, 59);
				Match('*'); 

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GAME_RESULT_END_OF_MOVETEXT", 31);
			LeaveRule("GAME_RESULT_END_OF_MOVETEXT", 31);
			LeaveRule_GAME_RESULT_END_OF_MOVETEXT();
		}
	}
	// $ANTLR end "GAME_RESULT_END_OF_MOVETEXT"

	partial void EnterRule_QUOTED_STRING();
	partial void LeaveRule_QUOTED_STRING();

	// $ANTLR start "QUOTED_STRING"
	[GrammarRule("QUOTED_STRING")]
	private void mQUOTED_STRING()
	{
		EnterRule_QUOTED_STRING();
		EnterRule("QUOTED_STRING", 32);
		TraceIn("QUOTED_STRING", 32);
		try
		{
			int _type = QUOTED_STRING;
			int _channel = DefaultTokenChannel;
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:77:15: ( QUOTE ( '\"\"' |~ QUOTE )* QUOTE )
			DebugEnterAlt(1);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:77:17: QUOTE ( '\"\"' |~ QUOTE )* QUOTE
			{
			DebugLocation(77, 17);
			mQUOTE(); 
			DebugLocation(77, 23);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:77:23: ( '\"\"' |~ QUOTE )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=3;
				try { DebugEnterDecision(5, false);
				int LA5_1 = input.LA(1);

				if ((LA5_1=='\"'))
				{
					int LA5_2 = input.LA(2);

					if ((LA5_2=='\"'))
					{
						alt5 = 1;
					}


				}
				else if (((LA5_1>='\u0000' && LA5_1<='!')||(LA5_1>='#' && LA5_1<='\uFFFF')))
				{
					alt5 = 2;
				}


				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// H:\\Work\\redchess\\PgnParser\\Pgn.g:77:24: '\"\"'
					{
					DebugLocation(77, 24);
					Match("\"\""); 


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// H:\\Work\\redchess\\PgnParser\\Pgn.g:77:31: ~ QUOTE
					{
					DebugLocation(77, 31);
					input.Consume();


					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }

			DebugLocation(77, 40);
			mQUOTE(); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("QUOTED_STRING", 32);
			LeaveRule("QUOTED_STRING", 32);
			LeaveRule_QUOTED_STRING();
		}
	}
	// $ANTLR end "QUOTED_STRING"

	partial void EnterRule_PIECE_TO_SQUARE();
	partial void LeaveRule_PIECE_TO_SQUARE();

	// $ANTLR start "PIECE_TO_SQUARE"
	[GrammarRule("PIECE_TO_SQUARE")]
	private void mPIECE_TO_SQUARE()
	{
		EnterRule_PIECE_TO_SQUARE();
		EnterRule("PIECE_TO_SQUARE", 33);
		TraceIn("PIECE_TO_SQUARE", 33);
		try
		{
			int _type = PIECE_TO_SQUARE;
			int _channel = DefaultTokenChannel;
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:79:17: ( SQUARE | ( ( PIECE_SYMBOL | UNAMBIGUOUS_PIECE_WITH_COLUMN | UNAMBIGUOUS_PIECE_WITH_ROW | UNAMBIGUOUS_PIECE_WITH_ROW_AND_COLUMN ) SQUARE ) )
			int alt7=2;
			try { DebugEnterDecision(7, false);
			int LA7_1 = input.LA(1);

			if (((LA7_1>='a' && LA7_1<='h')))
			{
				alt7 = 1;
			}
			else if ((LA7_1=='B'||LA7_1=='K'||LA7_1=='N'||(LA7_1>='P' && LA7_1<='R')))
			{
				alt7 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 7, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// H:\\Work\\redchess\\PgnParser\\Pgn.g:79:19: SQUARE
				{
				DebugLocation(79, 19);
				mSQUARE(); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// H:\\Work\\redchess\\PgnParser\\Pgn.g:79:28: ( ( PIECE_SYMBOL | UNAMBIGUOUS_PIECE_WITH_COLUMN | UNAMBIGUOUS_PIECE_WITH_ROW | UNAMBIGUOUS_PIECE_WITH_ROW_AND_COLUMN ) SQUARE )
				{
				DebugLocation(79, 28);
				// H:\\Work\\redchess\\PgnParser\\Pgn.g:79:28: ( ( PIECE_SYMBOL | UNAMBIGUOUS_PIECE_WITH_COLUMN | UNAMBIGUOUS_PIECE_WITH_ROW | UNAMBIGUOUS_PIECE_WITH_ROW_AND_COLUMN ) SQUARE )
				DebugEnterAlt(1);
				// H:\\Work\\redchess\\PgnParser\\Pgn.g:79:29: ( PIECE_SYMBOL | UNAMBIGUOUS_PIECE_WITH_COLUMN | UNAMBIGUOUS_PIECE_WITH_ROW | UNAMBIGUOUS_PIECE_WITH_ROW_AND_COLUMN ) SQUARE
				{
				DebugLocation(79, 29);
				// H:\\Work\\redchess\\PgnParser\\Pgn.g:79:29: ( PIECE_SYMBOL | UNAMBIGUOUS_PIECE_WITH_COLUMN | UNAMBIGUOUS_PIECE_WITH_ROW | UNAMBIGUOUS_PIECE_WITH_ROW_AND_COLUMN )
				int alt6=4;
				try { DebugEnterSubRule(6);
				try { DebugEnterDecision(6, false);
				int LA6_1 = input.LA(1);

				if ((LA6_1=='B'||LA6_1=='K'||LA6_1=='N'||(LA6_1>='P' && LA6_1<='R')))
				{
					int LA6_2 = input.LA(2);

					if (((LA6_2>='a' && LA6_2<='h')))
					{
						int LA6_3 = input.LA(3);

						if (((LA6_3>='1' && LA6_3<='8')))
						{
							int LA6_4 = input.LA(4);

							if (((LA6_4>='a' && LA6_4<='h')))
							{
								alt6 = 4;
							}
							else
							{
								alt6 = 1;
							}
						}
						else if (((LA6_3>='a' && LA6_3<='h')))
						{
							alt6 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 6, 2, input, 3);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else if (((LA6_2>='1' && LA6_2<='8')))
					{
						alt6 = 3;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 6, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 6, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// H:\\Work\\redchess\\PgnParser\\Pgn.g:79:30: PIECE_SYMBOL
					{
					DebugLocation(79, 30);
					mPIECE_SYMBOL(); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// H:\\Work\\redchess\\PgnParser\\Pgn.g:79:45: UNAMBIGUOUS_PIECE_WITH_COLUMN
					{
					DebugLocation(79, 45);
					mUNAMBIGUOUS_PIECE_WITH_COLUMN(); 

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// H:\\Work\\redchess\\PgnParser\\Pgn.g:79:77: UNAMBIGUOUS_PIECE_WITH_ROW
					{
					DebugLocation(79, 77);
					mUNAMBIGUOUS_PIECE_WITH_ROW(); 

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// H:\\Work\\redchess\\PgnParser\\Pgn.g:79:106: UNAMBIGUOUS_PIECE_WITH_ROW_AND_COLUMN
					{
					DebugLocation(79, 106);
					mUNAMBIGUOUS_PIECE_WITH_ROW_AND_COLUMN(); 

					}
					break;

				}
				} finally { DebugExitSubRule(6); }

				DebugLocation(79, 145);
				mSQUARE(); 

				}


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PIECE_TO_SQUARE", 33);
			LeaveRule("PIECE_TO_SQUARE", 33);
			LeaveRule_PIECE_TO_SQUARE();
		}
	}
	// $ANTLR end "PIECE_TO_SQUARE"

	partial void EnterRule_CAPTURE();
	partial void LeaveRule_CAPTURE();

	// $ANTLR start "CAPTURE"
	[GrammarRule("CAPTURE")]
	private void mCAPTURE()
	{
		EnterRule_CAPTURE();
		EnterRule("CAPTURE", 34);
		TraceIn("CAPTURE", 34);
		try
		{
			int _type = CAPTURE;
			int _channel = DefaultTokenChannel;
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:81:9: ( ( COLUMN | PIECE_SYMBOL | UNAMBIGUOUS_PIECE_WITH_COLUMN | UNAMBIGUOUS_PIECE_WITH_ROW | UNAMBIGUOUS_PIECE_WITH_ROW_AND_COLUMN ) TAKES SQUARE )
			DebugEnterAlt(1);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:81:11: ( COLUMN | PIECE_SYMBOL | UNAMBIGUOUS_PIECE_WITH_COLUMN | UNAMBIGUOUS_PIECE_WITH_ROW | UNAMBIGUOUS_PIECE_WITH_ROW_AND_COLUMN ) TAKES SQUARE
			{
			DebugLocation(81, 11);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:81:11: ( COLUMN | PIECE_SYMBOL | UNAMBIGUOUS_PIECE_WITH_COLUMN | UNAMBIGUOUS_PIECE_WITH_ROW | UNAMBIGUOUS_PIECE_WITH_ROW_AND_COLUMN )
			int alt8=5;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, false);
			int LA8_1 = input.LA(1);

			if (((LA8_1>='a' && LA8_1<='h')))
			{
				alt8 = 1;
			}
			else if ((LA8_1=='B'||LA8_1=='K'||LA8_1=='N'||(LA8_1>='P' && LA8_1<='R')))
			{
				switch (input.LA(2))
				{
				case 'x':
					{
					alt8 = 2;
					}
					break;
				case 'a':
				case 'b':
				case 'c':
				case 'd':
				case 'e':
				case 'f':
				case 'g':
				case 'h':
					{
					int LA8_3 = input.LA(3);

					if ((LA8_3=='x'))
					{
						alt8 = 3;
					}
					else if (((LA8_3>='1' && LA8_3<='8')))
					{
						alt8 = 5;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 8, 4, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case '1':
				case '2':
				case '3':
				case '4':
				case '5':
				case '6':
				case '7':
				case '8':
					{
					alt8 = 4;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 8, 2, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 8, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// H:\\Work\\redchess\\PgnParser\\Pgn.g:81:12: COLUMN
				{
				DebugLocation(81, 12);
				mCOLUMN(); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// H:\\Work\\redchess\\PgnParser\\Pgn.g:81:21: PIECE_SYMBOL
				{
				DebugLocation(81, 21);
				mPIECE_SYMBOL(); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// H:\\Work\\redchess\\PgnParser\\Pgn.g:81:36: UNAMBIGUOUS_PIECE_WITH_COLUMN
				{
				DebugLocation(81, 36);
				mUNAMBIGUOUS_PIECE_WITH_COLUMN(); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// H:\\Work\\redchess\\PgnParser\\Pgn.g:81:68: UNAMBIGUOUS_PIECE_WITH_ROW
				{
				DebugLocation(81, 68);
				mUNAMBIGUOUS_PIECE_WITH_ROW(); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// H:\\Work\\redchess\\PgnParser\\Pgn.g:81:97: UNAMBIGUOUS_PIECE_WITH_ROW_AND_COLUMN
				{
				DebugLocation(81, 97);
				mUNAMBIGUOUS_PIECE_WITH_ROW_AND_COLUMN(); 

				}
				break;

			}
			} finally { DebugExitSubRule(8); }

			DebugLocation(81, 136);
			mTAKES(); 
			DebugLocation(81, 142);
			mSQUARE(); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CAPTURE", 34);
			LeaveRule("CAPTURE", 34);
			LeaveRule_CAPTURE();
		}
	}
	// $ANTLR end "CAPTURE"

	partial void EnterRule_PROMOTES_TO_PIECE();
	partial void LeaveRule_PROMOTES_TO_PIECE();

	// $ANTLR start "PROMOTES_TO_PIECE"
	[GrammarRule("PROMOTES_TO_PIECE")]
	private void mPROMOTES_TO_PIECE()
	{
		EnterRule_PROMOTES_TO_PIECE();
		EnterRule("PROMOTES_TO_PIECE", 35);
		TraceIn("PROMOTES_TO_PIECE", 35);
		try
		{
			int _type = PROMOTES_TO_PIECE;
			int _channel = DefaultTokenChannel;
			CommonToken symbol = default(CommonToken);

			// H:\\Work\\redchess\\PgnParser\\Pgn.g:83:19: ( PROMOTES_TO symbol= PIECE_SYMBOL )
			DebugEnterAlt(1);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:83:21: PROMOTES_TO symbol= PIECE_SYMBOL
			{
			DebugLocation(83, 21);
			mPROMOTES_TO(); 
			DebugLocation(83, 39);
			int symbolStart462 = CharIndex;
			int symbolStartLine462 = Line;
			int symbolStartCharPos462 = CharPositionInLine;
			mPIECE_SYMBOL(); 
			symbol = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, symbolStart462, CharIndex-1);
			symbol.Line = symbolStartLine462;
			symbol.CharPositionInLine = symbolStartCharPos462;
			DebugLocation(83, 53);
			 Text = symbol.Text; 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PROMOTES_TO_PIECE", 35);
			LeaveRule("PROMOTES_TO_PIECE", 35);
			LeaveRule_PROMOTES_TO_PIECE();
		}
	}
	// $ANTLR end "PROMOTES_TO_PIECE"

	partial void EnterRule_INTEGER();
	partial void LeaveRule_INTEGER();

	// $ANTLR start "INTEGER"
	[GrammarRule("INTEGER")]
	private void mINTEGER()
	{
		EnterRule_INTEGER();
		EnterRule("INTEGER", 36);
		TraceIn("INTEGER", 36);
		try
		{
			int _type = INTEGER;
			int _channel = DefaultTokenChannel;
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:85:9: ( '1' .. '9' ( '0' .. '9' )* )
			DebugEnterAlt(1);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:85:11: '1' .. '9' ( '0' .. '9' )*
			{
			DebugLocation(85, 11);
			MatchRange('1','9'); 
			DebugLocation(85, 20);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:85:20: ( '0' .. '9' )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_1 = input.LA(1);

				if (((LA9_1>='0' && LA9_1<='9')))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// H:\\Work\\redchess\\PgnParser\\Pgn.g:
					{
					DebugLocation(85, 20);
					input.Consume();


					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INTEGER", 36);
			LeaveRule("INTEGER", 36);
			LeaveRule_INTEGER();
		}
	}
	// $ANTLR end "INTEGER"

	partial void EnterRule_MOVE_LABEL();
	partial void LeaveRule_MOVE_LABEL();

	// $ANTLR start "MOVE_LABEL"
	[GrammarRule("MOVE_LABEL")]
	private void mMOVE_LABEL()
	{
		EnterRule_MOVE_LABEL();
		EnterRule("MOVE_LABEL", 37);
		TraceIn("MOVE_LABEL", 37);
		try
		{
			int _type = MOVE_LABEL;
			int _channel = DefaultTokenChannel;
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:87:12: ( INTEGER '.' )
			DebugEnterAlt(1);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:87:14: INTEGER '.'
			{
			DebugLocation(87, 14);
			mINTEGER(); 
			DebugLocation(87, 22);
			Match('.'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MOVE_LABEL", 37);
			LeaveRule("MOVE_LABEL", 37);
			LeaveRule_MOVE_LABEL();
		}
	}
	// $ANTLR end "MOVE_LABEL"

	partial void EnterRule_BLOCK_COMMENT();
	partial void LeaveRule_BLOCK_COMMENT();

	// $ANTLR start "BLOCK_COMMENT"
	[GrammarRule("BLOCK_COMMENT")]
	private void mBLOCK_COMMENT()
	{
		EnterRule_BLOCK_COMMENT();
		EnterRule("BLOCK_COMMENT", 38);
		TraceIn("BLOCK_COMMENT", 38);
		try
		{
			int _type = BLOCK_COMMENT;
			int _channel = DefaultTokenChannel;
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:89:15: ( LEFT_CURLY_BRACKET (~ RIGHT_CURLY_BRACKET )* RIGHT_CURLY_BRACKET )
			DebugEnterAlt(1);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:89:17: LEFT_CURLY_BRACKET (~ RIGHT_CURLY_BRACKET )* RIGHT_CURLY_BRACKET
			{
			DebugLocation(89, 17);
			mLEFT_CURLY_BRACKET(); 
			DebugLocation(89, 36);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:89:36: (~ RIGHT_CURLY_BRACKET )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_1 = input.LA(1);

				if (((LA10_1>='\u0000' && LA10_1<='|')||(LA10_1>='~' && LA10_1<='\uFFFF')))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// H:\\Work\\redchess\\PgnParser\\Pgn.g:
					{
					DebugLocation(89, 36);
					input.Consume();


					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }

			DebugLocation(89, 60);
			mRIGHT_CURLY_BRACKET(); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BLOCK_COMMENT", 38);
			LeaveRule("BLOCK_COMMENT", 38);
			LeaveRule_BLOCK_COMMENT();
		}
	}
	// $ANTLR end "BLOCK_COMMENT"

	partial void EnterRule_NO_MOVE();
	partial void LeaveRule_NO_MOVE();

	// $ANTLR start "NO_MOVE"
	[GrammarRule("NO_MOVE")]
	private void mNO_MOVE()
	{
		EnterRule_NO_MOVE();
		EnterRule("NO_MOVE", 39);
		TraceIn("NO_MOVE", 39);
		try
		{
			int _type = NO_MOVE;
			int _channel = DefaultTokenChannel;
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:91:9: ( '...' )
			DebugEnterAlt(1);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:91:11: '...'
			{
			DebugLocation(91, 11);
			Match("..."); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NO_MOVE", 39);
			LeaveRule("NO_MOVE", 39);
			LeaveRule_NO_MOVE();
		}
	}
	// $ANTLR end "NO_MOVE"

	partial void EnterRule_TAG_NAME();
	partial void LeaveRule_TAG_NAME();

	// $ANTLR start "TAG_NAME"
	[GrammarRule("TAG_NAME")]
	private void mTAG_NAME()
	{
		EnterRule_TAG_NAME();
		EnterRule("TAG_NAME", 40);
		TraceIn("TAG_NAME", 40);
		try
		{
			int _type = TAG_NAME;
			int _channel = DefaultTokenChannel;
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:93:10: ( ( 'A' .. 'Z' | 'a' .. 'z' | '0' .. '9' | '_' )+ )
			DebugEnterAlt(1);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:93:12: ( 'A' .. 'Z' | 'a' .. 'z' | '0' .. '9' | '_' )+
			{
			DebugLocation(93, 12);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:93:12: ( 'A' .. 'Z' | 'a' .. 'z' | '0' .. '9' | '_' )+
			int cnt11=0;
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if (((LA11_1>='0' && LA11_1<='9')||(LA11_1>='A' && LA11_1<='Z')||LA11_1=='_'||(LA11_1>='a' && LA11_1<='z')))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// H:\\Work\\redchess\\PgnParser\\Pgn.g:
					{
					DebugLocation(93, 12);
					input.Consume();


					}
					break;

				default:
					if (cnt11 >= 1)
						goto loop11;

					EarlyExitException eee11 = new EarlyExitException( 11, input );
					DebugRecognitionException(eee11);
					throw eee11;
				}
				cnt11++;
			}
			loop11:
				;

			} finally { DebugExitSubRule(11); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TAG_NAME", 40);
			LeaveRule("TAG_NAME", 40);
			LeaveRule_TAG_NAME();
		}
	}
	// $ANTLR end "TAG_NAME"

	partial void EnterRule_NUMERIC_ANNOTATION_GLYPH();
	partial void LeaveRule_NUMERIC_ANNOTATION_GLYPH();

	// $ANTLR start "NUMERIC_ANNOTATION_GLYPH"
	[GrammarRule("NUMERIC_ANNOTATION_GLYPH")]
	private void mNUMERIC_ANNOTATION_GLYPH()
	{
		EnterRule_NUMERIC_ANNOTATION_GLYPH();
		EnterRule("NUMERIC_ANNOTATION_GLYPH", 41);
		TraceIn("NUMERIC_ANNOTATION_GLYPH", 41);
		try
		{
			int _type = NUMERIC_ANNOTATION_GLYPH;
			int _channel = DefaultTokenChannel;
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:95:26: ( '$' INTEGER )
			DebugEnterAlt(1);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:95:28: '$' INTEGER
			{
			DebugLocation(95, 28);
			Match('$'); 
			DebugLocation(95, 32);
			mINTEGER(); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NUMERIC_ANNOTATION_GLYPH", 41);
			LeaveRule("NUMERIC_ANNOTATION_GLYPH", 41);
			LeaveRule_NUMERIC_ANNOTATION_GLYPH();
		}
	}
	// $ANTLR end "NUMERIC_ANNOTATION_GLYPH"

	partial void EnterRule_MOVE_ANALYSIS();
	partial void LeaveRule_MOVE_ANALYSIS();

	// $ANTLR start "MOVE_ANALYSIS"
	[GrammarRule("MOVE_ANALYSIS")]
	private void mMOVE_ANALYSIS()
	{
		EnterRule_MOVE_ANALYSIS();
		EnterRule("MOVE_ANALYSIS", 42);
		TraceIn("MOVE_ANALYSIS", 42);
		try
		{
			int _type = MOVE_ANALYSIS;
			int _channel = DefaultTokenChannel;
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:97:15: ( '?' | '!' | '?!' | '!?' | '!!' | '??' )
			int alt12=6;
			try { DebugEnterDecision(12, false);
			int LA12_1 = input.LA(1);

			if ((LA12_1=='?'))
			{
				switch (input.LA(2))
				{
				case '!':
					{
					alt12 = 3;
					}
					break;
				case '?':
					{
					alt12 = 6;
					}
					break;
				default:
					alt12=1;
					break;

				}

			}
			else if ((LA12_1=='!'))
			{
				switch (input.LA(2))
				{
				case '?':
					{
					alt12 = 4;
					}
					break;
				case '!':
					{
					alt12 = 5;
					}
					break;
				default:
					alt12=2;
					break;

				}

			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// H:\\Work\\redchess\\PgnParser\\Pgn.g:97:17: '?'
				{
				DebugLocation(97, 17);
				Match('?'); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// H:\\Work\\redchess\\PgnParser\\Pgn.g:97:23: '!'
				{
				DebugLocation(97, 23);
				Match('!'); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// H:\\Work\\redchess\\PgnParser\\Pgn.g:97:29: '?!'
				{
				DebugLocation(97, 29);
				Match("?!"); 


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// H:\\Work\\redchess\\PgnParser\\Pgn.g:97:36: '!?'
				{
				DebugLocation(97, 36);
				Match("!?"); 


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// H:\\Work\\redchess\\PgnParser\\Pgn.g:97:43: '!!'
				{
				DebugLocation(97, 43);
				Match("!!"); 


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// H:\\Work\\redchess\\PgnParser\\Pgn.g:97:50: '??'
				{
				DebugLocation(97, 50);
				Match("??"); 


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MOVE_ANALYSIS", 42);
			LeaveRule("MOVE_ANALYSIS", 42);
			LeaveRule_MOVE_ANALYSIS();
		}
	}
	// $ANTLR end "MOVE_ANALYSIS"

	public override void mTokens()
	{
		// H:\\Work\\redchess\\PgnParser\\Pgn.g:1:8: ( BLACK | CASTLE_KINGSIDE | CASTLE_QUEENSIDE | CHECK | DATE | EVENT | LEFT_BRACKET | LEFT_CURLY_BRACKET | LEFT_TAG | MATE | PROMOTES_TO | QUOTE | RESULT | RIGHT_BRACKET | RIGHT_CURLY_BRACKET | RIGHT_TAG | ROUND | SITE | TAKES | WHITE | WS | LINE_COMMENT | GAME_RESULT | GAME_RESULT_END_OF_MOVETEXT | QUOTED_STRING | PIECE_TO_SQUARE | CAPTURE | PROMOTES_TO_PIECE | INTEGER | MOVE_LABEL | BLOCK_COMMENT | NO_MOVE | TAG_NAME | NUMERIC_ANNOTATION_GLYPH | MOVE_ANALYSIS )
		int alt13=35;
		try { DebugEnterDecision(13, false);
		try
		{
			alt13 = dfa13.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(13); }
		switch (alt13)
		{
		case 1:
			DebugEnterAlt(1);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:1:10: BLACK
			{
			DebugLocation(1, 10);
			mBLACK(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:1:16: CASTLE_KINGSIDE
			{
			DebugLocation(1, 16);
			mCASTLE_KINGSIDE(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:1:32: CASTLE_QUEENSIDE
			{
			DebugLocation(1, 32);
			mCASTLE_QUEENSIDE(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:1:49: CHECK
			{
			DebugLocation(1, 49);
			mCHECK(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:1:55: DATE
			{
			DebugLocation(1, 55);
			mDATE(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:1:60: EVENT
			{
			DebugLocation(1, 60);
			mEVENT(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:1:66: LEFT_BRACKET
			{
			DebugLocation(1, 66);
			mLEFT_BRACKET(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:1:79: LEFT_CURLY_BRACKET
			{
			DebugLocation(1, 79);
			mLEFT_CURLY_BRACKET(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:1:98: LEFT_TAG
			{
			DebugLocation(1, 98);
			mLEFT_TAG(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:1:107: MATE
			{
			DebugLocation(1, 107);
			mMATE(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:1:112: PROMOTES_TO
			{
			DebugLocation(1, 112);
			mPROMOTES_TO(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:1:124: QUOTE
			{
			DebugLocation(1, 124);
			mQUOTE(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:1:130: RESULT
			{
			DebugLocation(1, 130);
			mRESULT(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:1:137: RIGHT_BRACKET
			{
			DebugLocation(1, 137);
			mRIGHT_BRACKET(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:1:151: RIGHT_CURLY_BRACKET
			{
			DebugLocation(1, 151);
			mRIGHT_CURLY_BRACKET(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:1:171: RIGHT_TAG
			{
			DebugLocation(1, 171);
			mRIGHT_TAG(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:1:181: ROUND
			{
			DebugLocation(1, 181);
			mROUND(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:1:187: SITE
			{
			DebugLocation(1, 187);
			mSITE(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:1:192: TAKES
			{
			DebugLocation(1, 192);
			mTAKES(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:1:198: WHITE
			{
			DebugLocation(1, 198);
			mWHITE(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:1:204: WS
			{
			DebugLocation(1, 204);
			mWS(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:1:207: LINE_COMMENT
			{
			DebugLocation(1, 207);
			mLINE_COMMENT(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:1:220: GAME_RESULT
			{
			DebugLocation(1, 220);
			mGAME_RESULT(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:1:232: GAME_RESULT_END_OF_MOVETEXT
			{
			DebugLocation(1, 232);
			mGAME_RESULT_END_OF_MOVETEXT(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:1:260: QUOTED_STRING
			{
			DebugLocation(1, 260);
			mQUOTED_STRING(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:1:274: PIECE_TO_SQUARE
			{
			DebugLocation(1, 274);
			mPIECE_TO_SQUARE(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:1:290: CAPTURE
			{
			DebugLocation(1, 290);
			mCAPTURE(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:1:298: PROMOTES_TO_PIECE
			{
			DebugLocation(1, 298);
			mPROMOTES_TO_PIECE(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:1:316: INTEGER
			{
			DebugLocation(1, 316);
			mINTEGER(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:1:324: MOVE_LABEL
			{
			DebugLocation(1, 324);
			mMOVE_LABEL(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:1:335: BLOCK_COMMENT
			{
			DebugLocation(1, 335);
			mBLOCK_COMMENT(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:1:349: NO_MOVE
			{
			DebugLocation(1, 349);
			mNO_MOVE(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:1:357: TAG_NAME
			{
			DebugLocation(1, 357);
			mTAG_NAME(); 

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:1:366: NUMERIC_ANNOTATION_GLYPH
			{
			DebugLocation(1, 366);
			mNUMERIC_ANNOTATION_GLYPH(); 

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// H:\\Work\\redchess\\PgnParser\\Pgn.g:1:391: MOVE_ANALYSIS
			{
			DebugLocation(1, 391);
			mMOVE_ANALYSIS(); 

			}
			break;

		}

	}


	#region DFA
	DFA13 dfa13;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa13 = new DFA13(this, SpecialStateTransition13);
	}

	private class DFA13 : DFA
	{
		private const string DFA13_eotS =
			"\x1\xFFFF\x2\x1C\x1\xFFFF\x2\x1C\x1\xFFFF\x1\x26\x2\xFFFF\x1\x28\x1\x2D"+
			"\x1\x1C\x3\xFFFF\x1\x1C\x1\x32\x1\x1C\x2\xFFFF\x1\x1C\x1\x35\x1\xFFFF"+
			"\x2\x1C\x1\x35\x4\xFFFF\x4\x1C\x1\xFFFF\x2\x1C\x9\xFFFF\x3\x1C\x1\xFFFF"+
			"\x1\x1C\x1\x35\x2\xFFFF\x1\x47\x1\x1C\x1\x47\x2\x1C\x1\x4C\x2\x1C\x3"+
			"\xFFFF\x1\x52\x4\x1C\x1\xFFFF\x1\x1C\x1\x47\x1\x58\x2\xFFFF\x1\x59\x1"+
			"\x1C\x4\xFFFF\x2\x1C\x1\x60\x1\x1C\x1\x62\x2\xFFFF\x1\x63\x2\x52\x1\xFFFF"+
			"\x1\x1C\x1\x66\x1\xFFFF\x1\x67\x3\xFFFF\x1\x69\x5\xFFFF\x1\x52";
		private const string DFA13_eofS =
			"\x6C\xFFFF";
		private const string DFA13_minS =
			"\x1\x9\x1\x31\x1\x2D\x1\xFFFF\x1\x61\x1\x76\x1\xFFFF\x1\x0\x2\xFFFF\x1"+
			"\x42\x1\x0\x1\x31\x3\xFFFF\x1\x69\x1\x30\x1\x68\x2\xFFFF\x2\x2D\x1\xFFFF"+
			"\x2\x31\x1\x2E\x4\xFFFF\x1\x61\x1\x31\x2\x61\x1\x4F\x1\x74\x1\x65\x4"+
			"\xFFFF\x3\x0\x2\xFFFF\x1\x31\x1\x75\x1\x74\x1\xFFFF\x1\x69\x1\x2E\x2"+
			"\xFFFF\x1\x30\x1\x63\x1\x30\x2\x31\x1\x2D\x1\x65\x1\x6E\x3\x0\x1\x22"+
			"\x1\x75\x1\x6E\x1\x65\x1\x74\x1\xFFFF\x1\x6B\x2\x30\x2\xFFFF\x1\x30\x1"+
			"\x74\x3\x0\x1\xFFFF\x1\x6C\x1\x64\x1\x30\x1\x65\x1\x30\x2\xFFFF\x1\x30"+
			"\x2\x22\x1\x0\x1\x74\x1\x30\x1\xFFFF\x1\x30\x2\xFFFF\x1\x0\x1\x30\x2"+
			"\xFFFF\x1\x0\x1\xFFFF\x1\x0\x1\x22";
		private const string DFA13_maxS =
			"\x1\x7D\x1\x78\x1\x2D\x1\xFFFF\x1\x61\x1\x76\x1\xFFFF\x1\xFFFF\x2\xFFFF"+
			"\x1\x52\x1\xFFFF\x1\x78\x3\xFFFF\x1\x69\x1\x7A\x1\x68\x2\xFFFF\x1\x2D"+
			"\x1\x7A\x1\xFFFF\x2\x78\x1\x7A\x4\xFFFF\x1\x61\x2\x78\x1\x68\x1\x4F\x1"+
			"\x74\x1\x65\x4\xFFFF\x3\xFFFF\x2\xFFFF\x1\x78\x1\x75\x1\x74\x1\xFFFF"+
			"\x1\x69\x1\x7A\x2\xFFFF\x1\x7A\x1\x63\x1\x7A\x2\x38\x1\x2D\x1\x65\x1"+
			"\x6E\x3\xFFFF\x1\x22\x1\x75\x1\x6E\x1\x65\x1\x74\x1\xFFFF\x1\x6B\x2\x7A"+
			"\x2\xFFFF\x1\x7A\x1\x74\x3\xFFFF\x1\xFFFF\x1\x6C\x1\x64\x1\x7A\x1\x65"+
			"\x1\x7A\x2\xFFFF\x1\x7A\x2\x22\x1\xFFFF\x1\x74\x1\x7A\x1\xFFFF\x1\x7A"+
			"\x2\xFFFF\x1\xFFFF\x1\x7A\x2\xFFFF\x1\xFFFF\x1\xFFFF\x1\xFFFF\x1\x22";
		private const string DFA13_acceptS =
			"\x3\xFFFF\x1\x4\x2\xFFFF\x1\x7\x1\xFFFF\x1\x9\x1\xA\x3\xFFFF\x1\xE\x1"+
			"\xF\x1\x10\x3\xFFFF\x1\x15\x1\x16\x2\xFFFF\x1\x18\x3\xFFFF\x1\x20\x1"+
			"\x21\x1\x22\x1\x23\x7\xFFFF\x1\x8\x1\x1F\x1\xB\x1\x1C\x3\xFFFF\x1\xC"+
			"\x1\x19\x3\xFFFF\x1\x13\x2\xFFFF\x1\x1D\x1\x1E\x10\xFFFF\x1\x1A\x3\xFFFF"+
			"\x1\x3\x1\x2\x5\xFFFF\x1\x17\x5\xFFFF\x1\x1B\x1\x5\x6\xFFFF\x1\x12\x1"+
			"\xFFFF\x1\x1\x1\x6\x2\xFFFF\x1\x11\x1\x14\x1\xFFFF\x1\xD\x2\xFFFF";
		private const string DFA13_specialS =
			"\x7\xFFFF\x1\xE\x3\xFFFF\x1\xD\x1E\xFFFF\x1\x0\x1\xC\x1\xB\x12\xFFFF"+
			"\x1\x1\x1\x3\x1\x5\xD\xFFFF\x1\x2\x1\x4\x1\x6\xB\xFFFF\x1\x7\x6\xFFFF"+
			"\x1\x8\x3\xFFFF\x1\x9\x1\xFFFF\x1\xA\x1\xFFFF}>";
		private static readonly string[] DFA13_transitionS =
			{
				"\x2\x13\x2\xFFFF\x1\x13\x12\xFFFF\x1\x13\x1\x1E\x1\xB\x1\x9\x1\x1D\x3"+
				"\xFFFF\x1\x6\x1\xD\x1\x17\x1\x3\x2\xFFFF\x1\x1B\x1\xFFFF\x1\x15\x1\x16"+
				"\x8\x1A\x1\xFFFF\x1\x14\x1\xFFFF\x1\xA\x1\xFFFF\x1\x1E\x1\xFFFF\x1\x1C"+
				"\x1\x1\x1\x1C\x1\x4\x1\x5\x5\x1C\x1\x19\x2\x1C\x1\x19\x1\x2\x2\x19\x1"+
				"\xC\x1\x10\x3\x1C\x1\x12\x3\x1C\x1\x8\x1\xFFFF\x1\xF\x1\xFFFF\x1\x1C"+
				"\x1\xFFFF\x8\x18\xF\x1C\x1\x11\x2\x1C\x1\x7\x1\xFFFF\x1\xE",
				"\x8\x21\x28\xFFFF\x8\x20\x3\xFFFF\x1\x1F\xB\xFFFF\x1\x22",
				"\x1\x23",
				"",
				"\x1\x24",
				"\x1\x25",
				"",
				"\x0\x27",
				"",
				"",
				"\x1\x29\x8\xFFFF\x1\x29\x2\xFFFF\x1\x29\x1\xFFFF\x3\x29",
				"\x2A\x2E\x1\x2C\x5\x2E\x1\x2A\x1\x2B\xFFCE\x2E",
				"\x8\x21\x28\xFFFF\x4\x20\x1\x2F\x3\x20\x6\xFFFF\x1\x30\x8\xFFFF\x1"+
				"\x22",
				"",
				"",
				"",
				"\x1\x31",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				"\x1\x33",
				"",
				"",
				"\x1\x17",
				"\x1\x17\x1\x36\x1\x17\xA\x34\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF"+
				"\x1A\x1C",
				"",
				"\x8\x37\x3F\xFFFF\x1\x22",
				"\x8\x21\x28\xFFFF\x8\x20\xF\xFFFF\x1\x22",
				"\x1\x36\x1\xFFFF\xA\x34\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A"+
				"\x1C",
				"",
				"",
				"",
				"",
				"\x1\x38",
				"\x8\x39\x28\xFFFF\x8\x3A\xF\xFFFF\x1\x22",
				"\x8\x3A\xF\xFFFF\x1\x22",
				"\x8\x3B",
				"\x1\x3C",
				"\x1\x3D",
				"\x1\x3E",
				"",
				"",
				"",
				"",
				"\x2D\x2E\x1\x3F\xFFD2\x2E",
				"\x2D\x2E\x1\x40\x1\x2E\x1\x41\xFFD0\x2E",
				"\x22\x2E\x1\x42\xFFDD\x2E",
				"",
				"",
				"\x8\x39\x28\xFFFF\x8\x3A\xA\xFFFF\x1\x43\x4\xFFFF\x1\x22",
				"\x1\x44",
				"\x1\x45",
				"",
				"\x1\x46",
				"\x1\x36\x1\xFFFF\xA\x34\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A"+
				"\x1C",
				"",
				"",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				"\x1\x48",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x8\x3A\xF\x1C\x1"+
				"\x22\x2\x1C",
				"\x8\x49",
				"\x8\x4A",
				"\x1\x4B",
				"\x1\x4D",
				"\x1\x4E",
				"\x31\x2E\x1\x4F\xFFCE\x2E",
				"\x30\x2E\x1\x50\xFFCF\x2E",
				"\x32\x2E\x1\x51\xFFCD\x2E",
				"\x1\x2E",
				"\x1\x53",
				"\x1\x54",
				"\x1\x55",
				"\x1\x56",
				"",
				"\x1\x57",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				"",
				"",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				"\x1\x5A",
				"\x22\x2E\x1\x5B\xFFDD\x2E",
				"\x22\x2E\x1\x5C\xFFDD\x2E",
				"\x2D\x2E\x1\x5D\xFFD2\x2E",
				"",
				"\x1\x5E",
				"\x1\x5F",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				"\x1\x61",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				"",
				"",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				"\x1\x2E",
				"\x1\x2E",
				"\x31\x2E\x1\x64\xFFCE\x2E",
				"\x1\x65",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				"",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				"",
				"",
				"\x2F\x2E\x1\x68\xFFD0\x2E",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				"",
				"",
				"\x32\x2E\x1\x6A\xFFCD\x2E",
				"",
				"\x22\x2E\x1\x6B\xFFDD\x2E",
				"\x1\x2E"
			};

		private static readonly short[] DFA13_eot = DFA.UnpackEncodedString(DFA13_eotS);
		private static readonly short[] DFA13_eof = DFA.UnpackEncodedString(DFA13_eofS);
		private static readonly char[] DFA13_min = DFA.UnpackEncodedStringToUnsignedChars(DFA13_minS);
		private static readonly char[] DFA13_max = DFA.UnpackEncodedStringToUnsignedChars(DFA13_maxS);
		private static readonly short[] DFA13_accept = DFA.UnpackEncodedString(DFA13_acceptS);
		private static readonly short[] DFA13_special = DFA.UnpackEncodedString(DFA13_specialS);
		private static readonly short[][] DFA13_transition;

		static DFA13()
		{
			int numStates = DFA13_transitionS.Length;
			DFA13_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA13_transition[i] = DFA.UnpackEncodedString(DFA13_transitionS[i]);
			}
		}

		public DFA13( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 13;
			this.eot = DFA13_eot;
			this.eof = DFA13_eof;
			this.min = DFA13_min;
			this.max = DFA13_max;
			this.accept = DFA13_accept;
			this.special = DFA13_special;
			this.transition = DFA13_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( BLACK | CASTLE_KINGSIDE | CASTLE_QUEENSIDE | CHECK | DATE | EVENT | LEFT_BRACKET | LEFT_CURLY_BRACKET | LEFT_TAG | MATE | PROMOTES_TO | QUOTE | RESULT | RIGHT_BRACKET | RIGHT_CURLY_BRACKET | RIGHT_TAG | ROUND | SITE | TAKES | WHITE | WS | LINE_COMMENT | GAME_RESULT | GAME_RESULT_END_OF_MOVETEXT | QUOTED_STRING | PIECE_TO_SQUARE | CAPTURE | PROMOTES_TO_PIECE | INTEGER | MOVE_LABEL | BLOCK_COMMENT | NO_MOVE | TAG_NAME | NUMERIC_ANNOTATION_GLYPH | MOVE_ANALYSIS );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition13(DFA dfa, int s, IIntStream _input)
	{
		IIntStream input = _input;
		int _s = s;
		s = -1;
		int LA13_1 = input.LA(1);
		int index13_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				if ((LA13_1=='-')) {s = 63;}

				else if (((LA13_1>='\u0000' && LA13_1<=',')||(LA13_1>='.' && LA13_1<='\uFFFF'))) {s = 46;}

				break;
			}
		case 1:
			{
				if ((LA13_1=='1')) {s = 79;}

				else if (((LA13_1>='\u0000' && LA13_1<='0')||(LA13_1>='2' && LA13_1<='\uFFFF'))) {s = 46;}

				break;
			}
		case 2:
			{
				if ((LA13_1=='\"')) {s = 91;}

				else if (((LA13_1>='\u0000' && LA13_1<='!')||(LA13_1>='#' && LA13_1<='\uFFFF'))) {s = 46;}

				break;
			}
		case 3:
			{
				if ((LA13_1=='0')) {s = 80;}

				else if (((LA13_1>='\u0000' && LA13_1<='/')||(LA13_1>='1' && LA13_1<='\uFFFF'))) {s = 46;}

				break;
			}
		case 4:
			{
				if ((LA13_1=='\"')) {s = 92;}

				else if (((LA13_1>='\u0000' && LA13_1<='!')||(LA13_1>='#' && LA13_1<='\uFFFF'))) {s = 46;}

				break;
			}
		case 5:
			{
				if ((LA13_1=='2')) {s = 81;}

				else if (((LA13_1>='\u0000' && LA13_1<='1')||(LA13_1>='3' && LA13_1<='\uFFFF'))) {s = 46;}

				break;
			}
		case 6:
			{
				if ((LA13_1=='-')) {s = 93;}

				else if (((LA13_1>='\u0000' && LA13_1<=',')||(LA13_1>='.' && LA13_1<='\uFFFF'))) {s = 46;}

				break;
			}
		case 7:
			{
				if ((LA13_1=='1')) {s = 100;}

				else if (((LA13_1>='\u0000' && LA13_1<='0')||(LA13_1>='2' && LA13_1<='\uFFFF'))) {s = 46;}

				break;
			}
		case 8:
			{
				if ((LA13_1=='/')) {s = 104;}

				else if (((LA13_1>='\u0000' && LA13_1<='.')||(LA13_1>='0' && LA13_1<='\uFFFF'))) {s = 46;}

				break;
			}
		case 9:
			{
				if ((LA13_1=='2')) {s = 106;}

				else if (((LA13_1>='\u0000' && LA13_1<='1')||(LA13_1>='3' && LA13_1<='\uFFFF'))) {s = 46;}

				break;
			}
		case 10:
			{
				if ((LA13_1=='\"')) {s = 107;}

				else if (((LA13_1>='\u0000' && LA13_1<='!')||(LA13_1>='#' && LA13_1<='\uFFFF'))) {s = 46;}

				break;
			}
		case 11:
			{
				if ((LA13_1=='\"')) {s = 66;}

				else if (((LA13_1>='\u0000' && LA13_1<='!')||(LA13_1>='#' && LA13_1<='\uFFFF'))) {s = 46;}

				break;
			}
		case 12:
			{
				if ((LA13_1=='-')) {s = 64;}

				else if ((LA13_1=='/')) {s = 65;}

				else if (((LA13_1>='\u0000' && LA13_1<=',')||LA13_1=='.'||(LA13_1>='0' && LA13_1<='\uFFFF'))) {s = 46;}

				break;
			}
		case 13:
			{
				if ((LA13_1=='0')) {s = 42;}

				else if ((LA13_1=='1')) {s = 43;}

				else if ((LA13_1=='*')) {s = 44;}

				else if (((LA13_1>='\u0000' && LA13_1<=')')||(LA13_1>='+' && LA13_1<='/')||(LA13_1>='2' && LA13_1<='\uFFFF'))) {s = 46;}

				else s = 45;

				break;
			}
		case 14:
			{
				if (((LA13_1>='\u0000' && LA13_1<='\uFFFF'))) {s = 39;}

				else s = 38;

				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		NoViableAltException nvae = new NoViableAltException(dfa.Description, 13, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}

	#endregion

}

} // namespace  Redchess.Pgn 
