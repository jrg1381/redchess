@{
    ViewBag.Title = "Stats";
}

@section Head
{
    <link rel="stylesheet" type="text/css" href="/Scripts/app/viewer.css" />
    <script src="/Scripts/d3/d3.min.js" type="text/javascript"></script>
}

<style>
    path {
        fill: none;
        stroke: steelblue;
    }

    .x-axis line {
        fill: none;
        stroke: #000;
        stroke-width: 1.5px;
    }

    .x-axis path {
        fill: none;
        stroke: #000;
        stroke-width: 1.5px;
    }

    .blob {
        fill: steelblue;
    }
</style>

<script>
    function onDocumentReady() {
        var spinny = getSpinController();
        spinny.startLogoSpinner();

        $.getJSON("/api/Elo")
            .always(function() {
                spinny.stopLogoSpinner();

            })
            .done(function (data) {
                drawEloTable(data);
                drawWinLossTable(data.WinLoss);
                drawGraph(data);
                updateLastUpdated(data.LastUpdated);
            });
    };

    function updateLastUpdated(data) {
        $('time#last-updated').attr("datetime", data);
        $('time#last-updated').text(data);
        $("time.timeago").timeago();
    }

    function drawWinLossTable(data) {
        for (var property in data) {
            if (data.hasOwnProperty(property)) {
                var row = $("<tr></tr>");
                row.append($("<td>" + data[property].White + "</td>"));
                row.append($("<td>" + data[property].Black + "</td>"));
                row.append($("<td>" + data[property].Winner + "</td>"));
                row.append($("<td>" + data[property].Count + "</td>"));
                $("#winloss-table>tbody").append(row);
            }
        }
    }

    function drawEloTable(data) {
        var eloData = data.EloData;
        for (var property in eloData) {
            if (eloData.hasOwnProperty(property)) {
                // The server guarantees that the data comes back already sorted
                var latestElo = eloData[property][eloData[property].length - 1].Elo;
                var previousElo = eloData[property][eloData[property].length - 2].Elo;
                var filterFunction = function(x) { return x.UserId == property; };
                var userName = data.Profiles.filter(filterFunction)[0].UserName;
                var row = $("<tr></tr>");
                row.append($("<td>" + userName + "</td>"));
                row.append($("<td>" + latestElo + "</td>"));
                row.append($("<td>" + (latestElo - previousElo) + "</td>"));
                $("#ratings-table>tbody").append(row);
            }
        }
    };
    
    function drawGraph(data) {
        var width = $("#svg").width();
        var height = window.screen.availHeight / 1.5;
        var svg = d3.select("#svg").append("svg").attr("width", width).attr("height", height);
        svg.append("circle").attr("r", 50).attr("cx", 0).attr("cy", 0).attr("class", "blob");
        svg.append("circle").attr("r", 50).attr("cx", width).attr("cy", height).attr("class", "blob");
    }

    $(document).ready(function() {
        onDocumentReady();
    });
</script>

<h2>Stats</h2>

<div class="container">

    <table class="table" id="ratings-table">
        <thead>
        <tr>
            <th>User</th>
            <th>Elo</th>
            <th>+/-</th>
        </tr>
        </thead>
        <tbody>

        </tbody>
    </table>

    <table class="table" id="winloss-table">
        <thead>
            <tr>
                <th>White</th>
                <th>Black</th>
                <th>Winner</th>
                <th>Count</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>


    <div id="svg">
    </div>

    <p>
    Elo ratings updated <time class="timeago" id="last-updated" datetime="">Ratings updated</time>
    </p>
</div>
