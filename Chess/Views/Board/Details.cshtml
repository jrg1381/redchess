@model Chess.Models.BoardDto

@{
    ViewBag.Title = "Game";
}

<script src="/Scripts/jquery.cookie.js"></script>
<script src="/Scripts/jquery.signalR-2.1.0.min.js" type="text/javascript"></script>
<script src="/signalr/hubs"></script>
<script src="/Scripts/app/chess.js" type="text/javascript"></script>
<script src="/Scripts/app/chessboard-0.3.0.js"></script>
<link rel="stylesheet" type="text/css" href="/Scripts/app/chessboard-0.3.0.css" />

<style type="text/css">
    .highlight-white {
        -webkit-box-shadow: inset 0 0 3px 3px yellow;
        -moz-box-shadow: inset 0 0 3px 3px yellow;
        box-shadow: inset 0 0 3px 3px yellow;
    }

    .highlight-black {
        -webkit-box-shadow: inset 0 0 3px 3px blue;
        -moz-box-shadow: inset 0 0 3px 3px blue;
        box-shadow: inset 0 0 3px 3px blue;
    }
</style>

<script type="text/javascript">
    var chessBoard;
    var isTimedGame = false;
    gameId = @Model.GameId;
    currentPlayerColor = '@Model.CurrentPlayerColor(@User.Identity.Name)';

    function DoMove(source, target, piece) {
        if ((target[1] == '8' && piece == 'wP') || (target[1] == '1' && piece == 'bP')) {
            $("input#Start").val(source.toUpperCase());
            $("input#End").val(target.toUpperCase());
            $("#submitmove form").show();
            $("#Promote").val("Queen");
            return '';
        }

        PostMove(source.toUpperCase(), target.toUpperCase(), $("#Promote option:selected").text());
        $("#submitmove form").hide();
        $("#Promote").val([]);
    }

    function onDragStart(source, piece, position, orientation) {
        if ((orientation === 'white' && piece.search(/^w/) === -1) ||
            (orientation === 'black' && piece.search(/^b/) === -1) || 
            !$("form").is(":hidden") || piece.search(currentPlayerColor) == -1 || currentTurn != currentPlayerColor || boardLocked) {
            return false;
        }   
    }

    function DocumentReady() {
        var cfg = { pieceTheme: '/Images/{piece}.png', showNotation: false, draggable : true, onDrop : DoMove, onDragStart : onDragStart };
        chessBoard = new ChessBoard('board', cfg);

        if (currentPlayerColor == 'b') {
            chessBoard.flip();
        }

        UpdateUi('@Model.Fen');

        //SignalR stuff
        var updater = $.connection.updateServer;
        // Define a client-side message which the server can call
        updater.client.addMessage = function(message) {
            ProcessServerResponse(message);
        };

        // Define a callback for when the connection is established. We join the client group corresponding to our game ID.
        $.connection.hub.start(function() {
            $.connection.hub.proxies.updateserver.server.join('@Model.GameId');
        });

        // Hide the promotion UI and set its selection to nothing
        $("#submitmove form").hide();
        $("#Promote").val([]);

        // Draw any user messages, and update the set of taken pieces
        $("#messages").text('@Model.Status');
        UpdateTakenPieces('@Model.Fen');

        $("#submitmove form").submit(function() {
            PostMove($("input#Start").val(), $("input#End").val(), $("#Promote option:selected").text());
            $("#submitmove form").hide();
            $("#Promote").val([]);
            return false;
        });


        @if (Model.GameOver)
        {
            <text>EndGame();</text>
        }

        $("#resignbutton").mouseenter(function () {
            $("#resignbutton").css("background-color", "#B57271");
        }).mouseleave(function () {
            $("#resignbutton").css("background-color", "#8F514F");
        });

    }

    $(document).ready(function() {
        DocumentReady();
        @if (@Model.Clock() != null && @Model.Clock().PlayersReady != 3 && @Model.Clock().TimeElapsedBlackMs <= @Model.Clock().TimeLimitMs && @Model.Clock().TimeElapsedWhiteMs <= @Model.Clock().TimeLimitMs)
        {
            <text>
        LockBoard();
        </text>
        }
    });
</script>  

<div style="position:absolute;left:10px;top:10px">@Html.ActionLink("Back to list of games", "Index")
 @if (!Request.IsAuthenticated)
 {
     <text><div>You must be <a href="/">logged in</a> to participate in games.</div></text>
 }

<h2 id="title">@Model.Description</h2>

@if (Model.GameOver)
{
    <h3 id="gameover">Game over</h3>
}
</div>

<div id="boardparent" style="position:absolute;left:100px;top:170px">
    <div style="width:512px" id="board"></div>
    <div id="resign" style="position : absolute;left:5px;top:550px;"><a class="buttonlink" id="resignbutton" onclick="Resign();">Resign</a></div>
</div>

    <div id="submitmove" style="position:absolute;left:650px;top:100px">
        @using (Html.BeginForm("PlayMove", "Board", FormMethod.Post))
        {
            var items = new List<SelectListItem>
			{
				new SelectListItem {Value = "Queen", Text = "Queen"},
				new SelectListItem {Value = "Rook", Text = "Rook"},
				new SelectListItem {Value = "Knight", Text = "Knight"},
				new SelectListItem {Value = "Bishop", Text = "Bishop"},
			};

            @Html.Hidden("Start")
            @Html.Hidden("End")
            @Html.DropDownList("Promote", items, false)
            @Html.AntiForgeryToken()
            <input type="submit" value="Submit" id="submitbutton" class="buttonlink" />
        }

        @if (@Model.Clock() != null)
        {
            @Html.Partial("_Clock", @Model.Clock())
            <text>
                <script src="/Scripts/app/clock.js" type="text/javascript"></script>
                <script>
                    var myClock = new Clock(@Model.GameId, @Model.Clock().TimeLimitMs, '@Model.CurrentPlayerColor(@User.Identity.Name)');
                    isTimedGame = true;
                    $(document).ready(function() {
                        myClock.ClockDocumentReady();
                    });
                </script>
            </text>
        }

        <div id="messages"></div>
        <div id="lastmove"></div>
        <div id="turnindicator"></div>
        <div id="blacktaken" style="font-size: 36pt; color : whitesmoke"></div>
        <div id="whitetaken" style="font-size: 36pt; color : whitesmoke"></div>
    </div>



